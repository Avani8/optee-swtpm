
;; Function main (main, funcdef_no=2, decl_uid=5217, cgraph_uid=2, symbol_order=3)

Partition 7: size 136 align 16
	in
Partition 4: size 8 align 8
	policyFilename_14
Partition 3: size 8 align 8
	authPassword_11
Partition 16: size 8 align 8
	num
Partition 15: size 8 align 8
	submsg
Partition 14: size 8 align 8
	msg
Partition 6: size 8 align 8
	tssContext
Partition 5: size 4 align 4
	rc1_239
Partition 1: size 4 align 4
	i_6
Partition 0: size 4 align 4
	rc_1
Partition 13: size 4 align 4
	sessionAttributes2
Partition 12: size 4 align 4
	sessionHandle2
Partition 11: size 4 align 4
	sessionAttributes1
Partition 10: size 4 align 4
	sessionHandle1
Partition 9: size 4 align 4
	sessionAttributes0
Partition 8: size 4 align 4
	sessionHandle0
Partition 2: size 1 align 1
	authHandleChar_8

;; Generating RTL for gimple basic block 2

;; Generating RTL for gimple basic block 3

;; Generating RTL for gimple basic block 4

;; Generating RTL for gimple basic block 5

;; Generating RTL for gimple basic block 6

;; Generating RTL for gimple basic block 7

;; Generating RTL for gimple basic block 8

;; Generating RTL for gimple basic block 9

;; Generating RTL for gimple basic block 10

;; Generating RTL for gimple basic block 11

;; Generating RTL for gimple basic block 12

;; Generating RTL for gimple basic block 13

;; Generating RTL for gimple basic block 14

;; Generating RTL for gimple basic block 15

;; Generating RTL for gimple basic block 16

;; Generating RTL for gimple basic block 17

;; Generating RTL for gimple basic block 18

;; Generating RTL for gimple basic block 19

;; Generating RTL for gimple basic block 20

;; Generating RTL for gimple basic block 21

;; Generating RTL for gimple basic block 22

;; Generating RTL for gimple basic block 23

;; Generating RTL for gimple basic block 24

;; Generating RTL for gimple basic block 25

;; Generating RTL for gimple basic block 26

;; Generating RTL for gimple basic block 27

;; Generating RTL for gimple basic block 28

;; Generating RTL for gimple basic block 29

;; Generating RTL for gimple basic block 30

;; Generating RTL for gimple basic block 31

;; Generating RTL for gimple basic block 32

;; Generating RTL for gimple basic block 33

;; Generating RTL for gimple basic block 34

;; Generating RTL for gimple basic block 35

;; Generating RTL for gimple basic block 36

;; Generating RTL for gimple basic block 37

;; Generating RTL for gimple basic block 38

;; Generating RTL for gimple basic block 39

;; Generating RTL for gimple basic block 40

;; Generating RTL for gimple basic block 41

;; Generating RTL for gimple basic block 42

;; Generating RTL for gimple basic block 43

;; Generating RTL for gimple basic block 44

;; Generating RTL for gimple basic block 45

;; Generating RTL for gimple basic block 46

;; Generating RTL for gimple basic block 47

;; Generating RTL for gimple basic block 48

;; Generating RTL for gimple basic block 49

;; Generating RTL for gimple basic block 50

;; Generating RTL for gimple basic block 51

;; Generating RTL for gimple basic block 52

;; Generating RTL for gimple basic block 53

;; Generating RTL for gimple basic block 54

;; Generating RTL for gimple basic block 55

;; Generating RTL for gimple basic block 56

;; Generating RTL for gimple basic block 57

;; Generating RTL for gimple basic block 58

;; Generating RTL for gimple basic block 59

;; Generating RTL for gimple basic block 60

;; Generating RTL for gimple basic block 61

;; Generating RTL for gimple basic block 62

;; Generating RTL for gimple basic block 63

;; Generating RTL for gimple basic block 64

;; Generating RTL for gimple basic block 65

;; Generating RTL for gimple basic block 66

;; Generating RTL for gimple basic block 67

;; Generating RTL for gimple basic block 68

;; Generating RTL for gimple basic block 69

;; Generating RTL for gimple basic block 70

;; Generating RTL for gimple basic block 71

;; Generating RTL for gimple basic block 72

;; Generating RTL for gimple basic block 73

;; Generating RTL for gimple basic block 74

;; Generating RTL for gimple basic block 75

;; Generating RTL for gimple basic block 76

;; Generating RTL for gimple basic block 77

;; Generating RTL for gimple basic block 78

;; Generating RTL for gimple basic block 79

;; Generating RTL for gimple basic block 80

;; Generating RTL for gimple basic block 81

;; Generating RTL for gimple basic block 82

;; Generating RTL for gimple basic block 83

;; Generating RTL for gimple basic block 84

;; Generating RTL for gimple basic block 85

;; Generating RTL for gimple basic block 86

;; Generating RTL for gimple basic block 87

;; Generating RTL for gimple basic block 88

;; Generating RTL for gimple basic block 89

;; Generating RTL for gimple basic block 90

;; Generating RTL for gimple basic block 91

;; Generating RTL for gimple basic block 92

;; Generating RTL for gimple basic block 93

;; Generating RTL for gimple basic block 94

;; Generating RTL for gimple basic block 95

;; Generating RTL for gimple basic block 96

;; Generating RTL for gimple basic block 97


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Redirecting jump 60 from 8 to 64.
Merging block 8 into block 7...
Merged blocks 7 and 8.
Merged 7 and 8 without moving.
Redirecting jump 98 from 13 to 64.
Merging block 13 into block 12...
Merged blocks 12 and 13.
Merged 12 and 13 without moving.
Redirecting jump 136 from 18 to 64.
Merging block 18 into block 17...
Merged blocks 17 and 18.
Merged 17 and 18 without moving.
Redirecting jump 181 from 26 to 64.
Redirecting jump 199 from 26 to 64.
Merging block 26 into block 25...
Merged blocks 25 and 26.
Merged 25 and 26 without moving.
Redirecting jump 208 from 28 to 64.
Merging block 28 into block 27...
Merged blocks 27 and 28.
Merged 27 and 28 without moving.
Edge 34->36 redirected to 64
Merging block 36 into block 35...
Merged blocks 35 and 36.
Merged 35 and 36 without moving.
Redirecting jump 286 from 38 to 64.
Merging block 38 into block 37...
Merged blocks 37 and 38.
Merged 37 and 38 without moving.
Edge 44->46 redirected to 64
Merging block 46 into block 45...
Merged blocks 45 and 46.
Merged 45 and 46 without moving.
Redirecting jump 364 from 48 to 64.
Merging block 48 into block 47...
Merged blocks 47 and 48.
Merged 47 and 48 without moving.
Edge 54->56 redirected to 64
Merging block 56 into block 55...
Merged blocks 55 and 56.
Merged 55 and 56 without moving.
Redirecting jump 442 from 58 to 64.
Merging block 58 into block 57...
Merged blocks 57 and 58.
Merged 57 and 58 without moving.
Edge 68->70 redirected to 73
Merging block 70 into block 69...
Merged blocks 69 and 70.
Merged 69 and 70 without moving.
Edge 93->95 redirected to 97
Merging block 95 into block 94...
Merged blocks 94 and 95.
Merged 94 and 95 without moving.
Merging block 98 into block 97...
Merged blocks 97 and 98.
Merged 97 and 98 without moving.
Removing jump 707.
Merging block 99 into block 97...
Merged blocks 97 and 99.
Merged 97 and 99 without moving.


try_optimize_cfg iteration 2



;;
;; Full RTL generated for this function:
;;
(note 1 0 6 NOTE_INSN_DELETED)
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -244 [0xffffffffffffff0c])) [0 argc+0 S4 A32])
        (reg:SI 5 di [ argc ])) setprimarypolicy.c:58 -1
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])
        (reg:DI 4 si [ argv ])) setprimarypolicy.c:58 -1
     (nil))
(note 4 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 4 8 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -8 [0xfffffffffffffff8])) [0 D.5473+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (scratch:DI)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:58 -1
     (nil))
(insn 8 5 9 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -204 [0xffffffffffffff34])) [0 rc+0 S4 A32])
        (const_int 0 [0])) setprimarypolicy.c:59 -1
     (nil))
(insn 9 8 10 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -192 [0xffffffffffffff40])) [0 tssContext+0 S8 A64])
        (const_int 0 [0])) setprimarypolicy.c:61 -1
     (nil))
(insn 10 9 11 2 (set (mem/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -229 [0xffffffffffffff1b])) [0 authHandleChar+0 S1 A8])
        (const_int 112 [0x70])) setprimarypolicy.c:63 -1
     (nil))
(insn 11 10 12 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -160 [0xffffffffffffff60])) [0 authPassword+0 S8 A64])
        (const_int 0 [0])) setprimarypolicy.c:64 -1
     (nil))
(insn 12 11 13 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -152 [0xffffffffffffff68])) [0 policyFilename+0 S8 A64])
        (const_int 0 [0])) setprimarypolicy.c:65 -1
     (nil))
(insn 13 12 14 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -228 [0xffffffffffffff1c])) [0 sessionHandle0+0 S4 A32])
        (const_int 1073741833 [0x40000009])) setprimarypolicy.c:66 -1
     (nil))
(insn 14 13 15 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -224 [0xffffffffffffff20])) [0 sessionAttributes0+0 S4 A64])
        (const_int 0 [0])) setprimarypolicy.c:67 -1
     (nil))
(insn 15 14 16 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -220 [0xffffffffffffff24])) [0 sessionHandle1+0 S4 A32])
        (const_int 1073741831 [0x40000007])) setprimarypolicy.c:68 -1
     (nil))
(insn 16 15 17 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -216 [0xffffffffffffff28])) [0 sessionAttributes1+0 S4 A64])
        (const_int 0 [0])) setprimarypolicy.c:69 -1
     (nil))
(insn 17 16 18 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -212 [0xffffffffffffff2c])) [0 sessionHandle2+0 S4 A32])
        (const_int 1073741831 [0x40000007])) setprimarypolicy.c:70 -1
     (nil))
(insn 18 17 19 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -208 [0xffffffffffffff30])) [0 sessionAttributes2+0 S4 A64])
        (const_int 0 [0])) setprimarypolicy.c:71 -1
     (nil))
(insn 19 18 20 2 (set (reg/f:DI 87 [ D.5464 ])
        (mem/f/c:DI (symbol_ref:DI ("stdout") [flags 0x40]  <var_decl 0x7feef42625a0 stdout>) [0 stdout+0 S8 A64])) setprimarypolicy.c:73 -1
     (nil))
(insn 20 19 21 2 (set (reg:DI 2 cx)
        (const_int 0 [0])) setprimarypolicy.c:73 -1
     (nil))
(insn 21 20 22 2 (set (reg:SI 1 dx)
        (const_int 2 [0x2])) setprimarypolicy.c:73 -1
     (nil))
(insn 22 21 23 2 (set (reg:DI 4 si)
        (const_int 0 [0])) setprimarypolicy.c:73 -1
     (nil))
(insn 23 22 24 2 (set (reg:DI 5 di)
        (reg/f:DI 87 [ D.5464 ])) setprimarypolicy.c:73 -1
     (nil))
(call_insn 24 23 25 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("setvbuf") [flags 0x41]  <function_decl 0x7feef42a21b0 setvbuf>) [0 setvbuf S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:73 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 25 24 26 2 (set (reg:DI 1 dx)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7feef3d6a090 *.LC0>)) setprimarypolicy.c:74 -1
     (nil))
(insn 26 25 27 2 (set (reg:SI 4 si)
        (const_int 1 [0x1])) setprimarypolicy.c:74 -1
     (nil))
(insn 27 26 28 2 (set (reg:DI 5 di)
        (const_int 0 [0])) setprimarypolicy.c:74 -1
     (nil))
(call_insn 28 27 29 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("TSS_SetProperty") [flags 0x41]  <function_decl 0x7feef4116000 TSS_SetProperty>) [0 TSS_SetProperty S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:74 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 29 28 30 2 (set (mem/j/c:HI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -10 [0xfffffffffffffff6])) [0 in.hashAlg+0 S2 A16])
        (const_int 16 [0x10])) setprimarypolicy.c:76 -1
     (nil))
(insn 30 29 31 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])
        (const_int 1 [0x1])) setprimarypolicy.c:78 -1
     (nil))
(jump_insn 31 30 32 2 (set (pc)
        (label_ref 509)) setprimarypolicy.c:78 -1
     (nil)
 -> 509)
(barrier 32 31 515)
(code_label 515 32 33 4 40 "" [1 uses])
(note 33 515 34 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 4 (set (reg:SI 200)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])) setprimarypolicy.c:79 -1
     (nil))
(insn 35 34 36 4 (set (reg:DI 88 [ D.5465 ])
        (sign_extend:DI (reg:SI 200))) setprimarypolicy.c:79 -1
     (nil))
(insn 36 35 37 4 (parallel [
            (set (reg:DI 89 [ D.5465 ])
                (ashift:DI (reg:DI 88 [ D.5465 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:79 -1
     (nil))
(insn 37 36 38 4 (set (reg/f:DI 201)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])) setprimarypolicy.c:79 -1
     (nil))
(insn 38 37 39 4 (parallel [
            (set (reg/f:DI 90 [ D.5466 ])
                (plus:DI (reg:DI 89 [ D.5465 ])
                    (reg/f:DI 201)))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:79 -1
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])
            (reg:DI 89 [ D.5465 ]))
        (nil)))
(insn 39 38 40 4 (set (reg/f:DI 91 [ D.5467 ])
        (mem/f:DI (reg/f:DI 90 [ D.5466 ]) [0 *_62+0 S8 A64])) setprimarypolicy.c:79 -1
     (nil))
(insn 40 39 41 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7feef3d6a120 *.LC1>)) setprimarypolicy.c:79 -1
     (nil))
(insn 41 40 42 4 (set (reg:DI 5 di)
        (reg/f:DI 91 [ D.5467 ])) setprimarypolicy.c:79 -1
     (nil))
(call_insn/i 42 41 43 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7feef41aa0d8 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:79 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 43 42 44 4 (set (reg:SI 92 [ D.5468 ])
        (reg:SI 0 ax)) setprimarypolicy.c:79 -1
     (nil))
(insn 44 43 45 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 92 [ D.5468 ])
            (const_int 0 [0]))) setprimarypolicy.c:79 -1
     (nil))
(jump_insn 45 44 46 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 71)
            (pc))) setprimarypolicy.c:79 -1
     (nil)
 -> 71)
(note 46 45 47 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:80 -1
     (nil))
(insn 48 47 49 5 (set (reg:SI 202)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])) setprimarypolicy.c:81 -1
     (nil))
(insn 49 48 50 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 202)
            (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -244 [0xffffffffffffff0c])) [0 argc+0 S4 A32]))) setprimarypolicy.c:81 -1
     (nil))
(jump_insn 50 49 51 5 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 62)
            (pc))) setprimarypolicy.c:81 -1
     (nil)
 -> 62)
(note 51 50 52 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 53 6 (set (reg:SI 203)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])) setprimarypolicy.c:82 -1
     (nil))
(insn 53 52 54 6 (set (reg:DI 93 [ D.5465 ])
        (sign_extend:DI (reg:SI 203))) setprimarypolicy.c:82 -1
     (nil))
(insn 54 53 55 6 (parallel [
            (set (reg:DI 94 [ D.5465 ])
                (ashift:DI (reg:DI 93 [ D.5465 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:82 -1
     (nil))
(insn 55 54 56 6 (set (reg/f:DI 204)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])) setprimarypolicy.c:82 -1
     (nil))
(insn 56 55 57 6 (parallel [
            (set (reg/f:DI 95 [ D.5466 ])
                (plus:DI (reg:DI 94 [ D.5465 ])
                    (reg/f:DI 204)))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:82 -1
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])
            (reg:DI 94 [ D.5465 ]))
        (nil)))
(insn 57 56 58 6 (set (reg/f:DI 96 [ D.5467 ])
        (mem/f:DI (reg/f:DI 95 [ D.5466 ]) [0 *_68+0 S8 A64])) setprimarypolicy.c:82 -1
     (nil))
(insn 58 57 59 6 (set (reg:QI 205)
        (mem:QI (reg/f:DI 96 [ D.5467 ]) [0 *_69+0 S1 A8])) setprimarypolicy.c:82 -1
     (nil))
(insn 59 58 60 6 (set (mem/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -229 [0xffffffffffffff1b])) [0 authHandleChar+0 S1 A8])
        (reg:QI 205)) setprimarypolicy.c:82 -1
     (nil))
(jump_insn 60 59 61 6 (set (pc)
        (label_ref:DI 506)) 654 {jump}
     (nil)
 -> 506)
(barrier 61 60 62)
(code_label 62 61 63 7 4 "" [1 uses])
(note 63 62 64 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 7 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7feef3d6a1b0 *.LC2>)) setprimarypolicy.c:85 -1
     (nil))
(call_insn 65 64 66 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7feef41b3360 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:85 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(call_insn 66 65 69 7 (call (mem:QI (symbol_ref:DI ("printUsage") [flags 0x3]  <function_decl 0x7feef411f000 printUsage>) [0 printUsage S1 A8])
        (const_int 0 [0])) setprimarypolicy.c:86 -1
     (nil)
    (nil))
(jump_insn 69 66 70 7 (set (pc)
        (label_ref 506)) -1
     (nil)
 -> 506)
(barrier 70 69 71)
(code_label 71 70 72 9 3 "" [1 uses])
(note 72 71 73 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 73 72 74 9 (set (reg:SI 206)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])) setprimarypolicy.c:89 -1
     (nil))
(insn 74 73 75 9 (set (reg:DI 97 [ D.5465 ])
        (sign_extend:DI (reg:SI 206))) setprimarypolicy.c:89 -1
     (nil))
(insn 75 74 76 9 (parallel [
            (set (reg:DI 98 [ D.5465 ])
                (ashift:DI (reg:DI 97 [ D.5465 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:89 -1
     (nil))
(insn 76 75 77 9 (set (reg/f:DI 207)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])) setprimarypolicy.c:89 -1
     (nil))
(insn 77 76 78 9 (parallel [
            (set (reg/f:DI 99 [ D.5466 ])
                (plus:DI (reg:DI 98 [ D.5465 ])
                    (reg/f:DI 207)))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:89 -1
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])
            (reg:DI 98 [ D.5465 ]))
        (nil)))
(insn 78 77 79 9 (set (reg/f:DI 100 [ D.5467 ])
        (mem/f:DI (reg/f:DI 99 [ D.5466 ]) [0 *_75+0 S8 A64])) setprimarypolicy.c:89 -1
     (nil))
(insn 79 78 80 9 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7feef3d6a240 *.LC3>)) setprimarypolicy.c:89 -1
     (nil))
(insn 80 79 81 9 (set (reg:DI 5 di)
        (reg/f:DI 100 [ D.5467 ])) setprimarypolicy.c:89 -1
     (nil))
(call_insn/i 81 80 82 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7feef41aa0d8 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:89 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 82 81 83 9 (set (reg:SI 101 [ D.5468 ])
        (reg:SI 0 ax)) setprimarypolicy.c:89 -1
     (nil))
(insn 83 82 84 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 101 [ D.5468 ])
            (const_int 0 [0]))) setprimarypolicy.c:89 -1
     (nil))
(jump_insn 84 83 85 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 109)
            (pc))) setprimarypolicy.c:89 -1
     (nil)
 -> 109)
(note 85 84 86 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 86 85 87 10 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:90 -1
     (nil))
(insn 87 86 88 10 (set (reg:SI 208)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])) setprimarypolicy.c:91 -1
     (nil))
(insn 88 87 89 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 208)
            (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -244 [0xffffffffffffff0c])) [0 argc+0 S4 A32]))) setprimarypolicy.c:91 -1
     (nil))
(jump_insn 89 88 90 10 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 100)
            (pc))) setprimarypolicy.c:91 -1
     (nil)
 -> 100)
(note 90 89 91 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 91 90 92 11 (set (reg:SI 209)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])) setprimarypolicy.c:92 -1
     (nil))
(insn 92 91 93 11 (set (reg:DI 102 [ D.5465 ])
        (sign_extend:DI (reg:SI 209))) setprimarypolicy.c:92 -1
     (nil))
(insn 93 92 94 11 (parallel [
            (set (reg:DI 103 [ D.5465 ])
                (ashift:DI (reg:DI 102 [ D.5465 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:92 -1
     (nil))
(insn 94 93 95 11 (set (reg/f:DI 210)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])) setprimarypolicy.c:92 -1
     (nil))
(insn 95 94 96 11 (parallel [
            (set (reg/f:DI 104 [ D.5466 ])
                (plus:DI (reg:DI 103 [ D.5465 ])
                    (reg/f:DI 210)))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:92 -1
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])
            (reg:DI 103 [ D.5465 ]))
        (nil)))
(insn 96 95 97 11 (set (reg/f:DI 211)
        (mem/f:DI (reg/f:DI 104 [ D.5466 ]) [0 *_81+0 S8 A64])) setprimarypolicy.c:92 -1
     (nil))
(insn 97 96 98 11 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -160 [0xffffffffffffff60])) [0 authPassword+0 S8 A64])
        (reg/f:DI 211)) setprimarypolicy.c:92 -1
     (nil))
(jump_insn 98 97 99 11 (set (pc)
        (label_ref:DI 506)) 654 {jump}
     (nil)
 -> 506)
(barrier 99 98 100)
(code_label 100 99 101 12 8 "" [1 uses])
(note 101 100 102 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 102 101 103 12 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7feef3d6a2d0 *.LC4>)) setprimarypolicy.c:95 -1
     (nil))
(call_insn 103 102 104 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7feef41b3360 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:95 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(call_insn 104 103 107 12 (call (mem:QI (symbol_ref:DI ("printUsage") [flags 0x3]  <function_decl 0x7feef411f000 printUsage>) [0 printUsage S1 A8])
        (const_int 0 [0])) setprimarypolicy.c:96 -1
     (nil)
    (nil))
(jump_insn 107 104 108 12 (set (pc)
        (label_ref 506)) -1
     (nil)
 -> 506)
(barrier 108 107 109)
(code_label 109 108 110 14 7 "" [1 uses])
(note 110 109 111 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 111 110 112 14 (set (reg:SI 212)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])) setprimarypolicy.c:99 -1
     (nil))
(insn 112 111 113 14 (set (reg:DI 105 [ D.5465 ])
        (sign_extend:DI (reg:SI 212))) setprimarypolicy.c:99 -1
     (nil))
(insn 113 112 114 14 (parallel [
            (set (reg:DI 106 [ D.5465 ])
                (ashift:DI (reg:DI 105 [ D.5465 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:99 -1
     (nil))
(insn 114 113 115 14 (set (reg/f:DI 213)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])) setprimarypolicy.c:99 -1
     (nil))
(insn 115 114 116 14 (parallel [
            (set (reg/f:DI 107 [ D.5466 ])
                (plus:DI (reg:DI 106 [ D.5465 ])
                    (reg/f:DI 213)))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:99 -1
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])
            (reg:DI 106 [ D.5465 ]))
        (nil)))
(insn 116 115 117 14 (set (reg/f:DI 108 [ D.5467 ])
        (mem/f:DI (reg/f:DI 107 [ D.5466 ]) [0 *_87+0 S8 A64])) setprimarypolicy.c:99 -1
     (nil))
(insn 117 116 118 14 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7feef3d6a360 *.LC5>)) setprimarypolicy.c:99 -1
     (nil))
(insn 118 117 119 14 (set (reg:DI 5 di)
        (reg/f:DI 108 [ D.5467 ])) setprimarypolicy.c:99 -1
     (nil))
(call_insn/i 119 118 120 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7feef41aa0d8 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:99 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 120 119 121 14 (set (reg:SI 109 [ D.5468 ])
        (reg:SI 0 ax)) setprimarypolicy.c:99 -1
     (nil))
(insn 121 120 122 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 109 [ D.5468 ])
            (const_int 0 [0]))) setprimarypolicy.c:99 -1
     (nil))
(jump_insn 122 121 123 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 147)
            (pc))) setprimarypolicy.c:99 -1
     (nil)
 -> 147)
(note 123 122 124 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 124 123 125 15 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:100 -1
     (nil))
(insn 125 124 126 15 (set (reg:SI 214)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])) setprimarypolicy.c:101 -1
     (nil))
(insn 126 125 127 15 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 214)
            (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -244 [0xffffffffffffff0c])) [0 argc+0 S4 A32]))) setprimarypolicy.c:101 -1
     (nil))
(jump_insn 127 126 128 15 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 138)
            (pc))) setprimarypolicy.c:101 -1
     (nil)
 -> 138)
(note 128 127 129 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 129 128 130 16 (set (reg:SI 215)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])) setprimarypolicy.c:102 -1
     (nil))
(insn 130 129 131 16 (set (reg:DI 110 [ D.5465 ])
        (sign_extend:DI (reg:SI 215))) setprimarypolicy.c:102 -1
     (nil))
(insn 131 130 132 16 (parallel [
            (set (reg:DI 111 [ D.5465 ])
                (ashift:DI (reg:DI 110 [ D.5465 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:102 -1
     (nil))
(insn 132 131 133 16 (set (reg/f:DI 216)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])) setprimarypolicy.c:102 -1
     (nil))
(insn 133 132 134 16 (parallel [
            (set (reg/f:DI 112 [ D.5466 ])
                (plus:DI (reg:DI 111 [ D.5465 ])
                    (reg/f:DI 216)))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:102 -1
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])
            (reg:DI 111 [ D.5465 ]))
        (nil)))
(insn 134 133 135 16 (set (reg/f:DI 217)
        (mem/f:DI (reg/f:DI 112 [ D.5466 ]) [0 *_93+0 S8 A64])) setprimarypolicy.c:102 -1
     (nil))
(insn 135 134 136 16 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -152 [0xffffffffffffff68])) [0 policyFilename+0 S8 A64])
        (reg/f:DI 217)) setprimarypolicy.c:102 -1
     (nil))
(jump_insn 136 135 137 16 (set (pc)
        (label_ref:DI 506)) 654 {jump}
     (nil)
 -> 506)
(barrier 137 136 138)
(code_label 138 137 139 17 11 "" [1 uses])
(note 139 138 140 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 140 139 141 17 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7feef3d6a3f0 *.LC6>)) setprimarypolicy.c:105 -1
     (nil))
(call_insn 141 140 142 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7feef41b3360 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:105 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(call_insn 142 141 145 17 (call (mem:QI (symbol_ref:DI ("printUsage") [flags 0x3]  <function_decl 0x7feef411f000 printUsage>) [0 printUsage S1 A8])
        (const_int 0 [0])) setprimarypolicy.c:106 -1
     (nil)
    (nil))
(jump_insn 145 142 146 17 (set (pc)
        (label_ref 506)) -1
     (nil)
 -> 506)
(barrier 146 145 147)
(code_label 147 146 148 19 10 "" [1 uses])
(note 148 147 149 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 149 148 150 19 (set (reg:SI 218)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])) setprimarypolicy.c:109 -1
     (nil))
(insn 150 149 151 19 (set (reg:DI 113 [ D.5465 ])
        (sign_extend:DI (reg:SI 218))) setprimarypolicy.c:109 -1
     (nil))
(insn 151 150 152 19 (parallel [
            (set (reg:DI 114 [ D.5465 ])
                (ashift:DI (reg:DI 113 [ D.5465 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:109 -1
     (nil))
(insn 152 151 153 19 (set (reg/f:DI 219)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])) setprimarypolicy.c:109 -1
     (nil))
(insn 153 152 154 19 (parallel [
            (set (reg/f:DI 115 [ D.5466 ])
                (plus:DI (reg:DI 114 [ D.5465 ])
                    (reg/f:DI 219)))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:109 -1
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])
            (reg:DI 114 [ D.5465 ]))
        (nil)))
(insn 154 153 155 19 (set (reg/f:DI 116 [ D.5467 ])
        (mem/f:DI (reg/f:DI 115 [ D.5466 ]) [0 *_99+0 S8 A64])) setprimarypolicy.c:109 -1
     (nil))
(insn 155 154 156 19 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7feef3d6a480 *.LC7>)) setprimarypolicy.c:109 -1
     (nil))
(insn 156 155 157 19 (set (reg:DI 5 di)
        (reg/f:DI 116 [ D.5467 ])) setprimarypolicy.c:109 -1
     (nil))
(call_insn/i 157 156 158 19 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7feef41aa0d8 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:109 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 158 157 159 19 (set (reg:SI 117 [ D.5468 ])
        (reg:SI 0 ax)) setprimarypolicy.c:109 -1
     (nil))
(insn 159 158 160 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 117 [ D.5468 ])
            (const_int 0 [0]))) setprimarypolicy.c:109 -1
     (nil))
(jump_insn 160 159 161 19 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 219)
            (pc))) setprimarypolicy.c:109 -1
     (nil)
 -> 219)
(note 161 160 162 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 162 161 163 20 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:110 -1
     (nil))
(insn 163 162 164 20 (set (reg:SI 220)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])) setprimarypolicy.c:111 -1
     (nil))
(insn 164 163 165 20 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 220)
            (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -244 [0xffffffffffffff0c])) [0 argc+0 S4 A32]))) setprimarypolicy.c:111 -1
     (nil))
(jump_insn 165 164 166 20 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 210)
            (pc))) setprimarypolicy.c:111 -1
     (nil)
 -> 210)
(note 166 165 167 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 167 166 168 21 (set (reg:SI 221)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])) setprimarypolicy.c:112 -1
     (nil))
(insn 168 167 169 21 (set (reg:DI 118 [ D.5465 ])
        (sign_extend:DI (reg:SI 221))) setprimarypolicy.c:112 -1
     (nil))
(insn 169 168 170 21 (parallel [
            (set (reg:DI 119 [ D.5465 ])
                (ashift:DI (reg:DI 118 [ D.5465 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:112 -1
     (nil))
(insn 170 169 171 21 (set (reg/f:DI 222)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])) setprimarypolicy.c:112 -1
     (nil))
(insn 171 170 172 21 (parallel [
            (set (reg/f:DI 120 [ D.5466 ])
                (plus:DI (reg:DI 119 [ D.5465 ])
                    (reg/f:DI 222)))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:112 -1
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])
            (reg:DI 119 [ D.5465 ]))
        (nil)))
(insn 172 171 173 21 (set (reg/f:DI 121 [ D.5467 ])
        (mem/f:DI (reg/f:DI 120 [ D.5466 ]) [0 *_105+0 S8 A64])) setprimarypolicy.c:112 -1
     (nil))
(insn 173 172 174 21 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7feef3d6a510 *.LC8>)) setprimarypolicy.c:112 -1
     (nil))
(insn 174 173 175 21 (set (reg:DI 5 di)
        (reg/f:DI 121 [ D.5467 ])) setprimarypolicy.c:112 -1
     (nil))
(call_insn/i 175 174 176 21 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7feef41aa0d8 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:112 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 176 175 177 21 (set (reg:SI 122 [ D.5468 ])
        (reg:SI 0 ax)) setprimarypolicy.c:112 -1
     (nil))
(insn 177 176 178 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 122 [ D.5468 ])
            (const_int 0 [0]))) setprimarypolicy.c:112 -1
     (nil))
(jump_insn 178 177 179 21 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 183)
            (pc))) setprimarypolicy.c:112 -1
     (nil)
 -> 183)
(note 179 178 180 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 180 179 181 22 (set (mem/j/c:HI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -10 [0xfffffffffffffff6])) [0 in.hashAlg+0 S2 A16])
        (const_int 11 [0xb])) setprimarypolicy.c:113 -1
     (nil))
(jump_insn 181 180 182 22 (set (pc)
        (label_ref:DI 506)) 654 {jump}
     (nil)
 -> 506)
(barrier 182 181 183)
(code_label 183 182 184 23 15 "" [1 uses])
(note 184 183 185 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 185 184 186 23 (set (reg:SI 223)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])) setprimarypolicy.c:115 -1
     (nil))
(insn 186 185 187 23 (set (reg:DI 123 [ D.5465 ])
        (sign_extend:DI (reg:SI 223))) setprimarypolicy.c:115 -1
     (nil))
(insn 187 186 188 23 (parallel [
            (set (reg:DI 124 [ D.5465 ])
                (ashift:DI (reg:DI 123 [ D.5465 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:115 -1
     (nil))
(insn 188 187 189 23 (set (reg/f:DI 224)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])) setprimarypolicy.c:115 -1
     (nil))
(insn 189 188 190 23 (parallel [
            (set (reg/f:DI 125 [ D.5466 ])
                (plus:DI (reg:DI 124 [ D.5465 ])
                    (reg/f:DI 224)))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:115 -1
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])
            (reg:DI 124 [ D.5465 ]))
        (nil)))
(insn 190 189 191 23 (set (reg/f:DI 126 [ D.5467 ])
        (mem/f:DI (reg/f:DI 125 [ D.5466 ]) [0 *_111+0 S8 A64])) setprimarypolicy.c:115 -1
     (nil))
(insn 191 190 192 23 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7feef3d6a5a0 *.LC9>)) setprimarypolicy.c:115 -1
     (nil))
(insn 192 191 193 23 (set (reg:DI 5 di)
        (reg/f:DI 126 [ D.5467 ])) setprimarypolicy.c:115 -1
     (nil))
(call_insn/i 193 192 194 23 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7feef41aa0d8 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:115 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 194 193 195 23 (set (reg:SI 127 [ D.5468 ])
        (reg:SI 0 ax)) setprimarypolicy.c:115 -1
     (nil))
(insn 195 194 196 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 127 [ D.5468 ])
            (const_int 0 [0]))) setprimarypolicy.c:115 -1
     (nil))
(jump_insn 196 195 197 23 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 201)
            (pc))) setprimarypolicy.c:115 -1
     (nil)
 -> 201)
(note 197 196 198 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 198 197 199 24 (set (mem/j/c:HI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -10 [0xfffffffffffffff6])) [0 in.hashAlg+0 S2 A16])
        (const_int 4 [0x4])) setprimarypolicy.c:116 -1
     (nil))
(jump_insn 199 198 200 24 (set (pc)
        (label_ref:DI 506)) 654 {jump}
     (nil)
 -> 506)
(barrier 200 199 201)
(code_label 201 200 202 25 17 "" [1 uses])
(note 202 201 203 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 203 202 204 25 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7feef3d6a630 *.LC10>)) setprimarypolicy.c:119 -1
     (nil))
(call_insn 204 203 205 25 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7feef41b3360 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:119 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(call_insn 205 204 208 25 (call (mem:QI (symbol_ref:DI ("printUsage") [flags 0x3]  <function_decl 0x7feef411f000 printUsage>) [0 printUsage S1 A8])
        (const_int 0 [0])) setprimarypolicy.c:120 -1
     (nil)
    (nil))
(jump_insn 208 205 209 25 (set (pc)
        (label_ref:DI 506)) 654 {jump}
     (nil)
 -> 506)
(barrier 209 208 210)
(code_label 210 209 211 27 14 "" [1 uses])
(note 211 210 212 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 212 211 213 27 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7feef3d6a6c0 *.LC11>)) setprimarypolicy.c:124 -1
     (nil))
(call_insn 213 212 214 27 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7feef41b3360 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:124 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(call_insn 214 213 217 27 (call (mem:QI (symbol_ref:DI ("printUsage") [flags 0x3]  <function_decl 0x7feef411f000 printUsage>) [0 printUsage S1 A8])
        (const_int 0 [0])) setprimarypolicy.c:125 -1
     (nil)
    (nil))
(jump_insn 217 214 218 27 (set (pc)
        (label_ref 506)) -1
     (nil)
 -> 506)
(barrier 218 217 219)
(code_label 219 218 220 29 13 "" [1 uses])
(note 220 219 221 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 221 220 222 29 (set (reg:SI 225)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])) setprimarypolicy.c:128 -1
     (nil))
(insn 222 221 223 29 (set (reg:DI 128 [ D.5465 ])
        (sign_extend:DI (reg:SI 225))) setprimarypolicy.c:128 -1
     (nil))
(insn 223 222 224 29 (parallel [
            (set (reg:DI 129 [ D.5465 ])
                (ashift:DI (reg:DI 128 [ D.5465 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:128 -1
     (nil))
(insn 224 223 225 29 (set (reg/f:DI 226)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])) setprimarypolicy.c:128 -1
     (nil))
(insn 225 224 226 29 (parallel [
            (set (reg/f:DI 130 [ D.5466 ])
                (plus:DI (reg:DI 129 [ D.5465 ])
                    (reg/f:DI 226)))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:128 -1
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])
            (reg:DI 129 [ D.5465 ]))
        (nil)))
(insn 226 225 227 29 (set (reg/f:DI 131 [ D.5467 ])
        (mem/f:DI (reg/f:DI 130 [ D.5466 ]) [0 *_121+0 S8 A64])) setprimarypolicy.c:128 -1
     (nil))
(insn 227 226 228 29 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7feef3d6a750 *.LC12>)) setprimarypolicy.c:128 -1
     (nil))
(insn 228 227 229 29 (set (reg:DI 5 di)
        (reg/f:DI 131 [ D.5467 ])) setprimarypolicy.c:128 -1
     (nil))
(call_insn/i 229 228 230 29 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7feef41aa0d8 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:128 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 230 229 231 29 (set (reg:SI 132 [ D.5468 ])
        (reg:SI 0 ax)) setprimarypolicy.c:128 -1
     (nil))
(insn 231 230 232 29 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 132 [ D.5468 ])
            (const_int 0 [0]))) setprimarypolicy.c:128 -1
     (nil))
(jump_insn 232 231 233 29 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 297)
            (pc))) setprimarypolicy.c:128 -1
     (nil)
 -> 297)
(note 233 232 234 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 234 233 235 30 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:129 -1
     (nil))
(insn 235 234 236 30 (set (reg:SI 227)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])) setprimarypolicy.c:130 -1
     (nil))
(insn 236 235 237 30 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 227)
            (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -244 [0xffffffffffffff0c])) [0 argc+0 S4 A32]))) setprimarypolicy.c:130 -1
     (nil))
(jump_insn 237 236 238 30 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 253)
            (pc))) setprimarypolicy.c:130 -1
     (nil)
 -> 253)
(note 238 237 239 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 239 238 240 31 (set (reg:SI 228)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])) setprimarypolicy.c:131 -1
     (nil))
(insn 240 239 241 31 (set (reg:DI 133 [ D.5465 ])
        (sign_extend:DI (reg:SI 228))) setprimarypolicy.c:131 -1
     (nil))
(insn 241 240 242 31 (parallel [
            (set (reg:DI 134 [ D.5465 ])
                (ashift:DI (reg:DI 133 [ D.5465 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:131 -1
     (nil))
(insn 242 241 243 31 (set (reg/f:DI 229)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])) setprimarypolicy.c:131 -1
     (nil))
(insn 243 242 244 31 (parallel [
            (set (reg/f:DI 135 [ D.5466 ])
                (plus:DI (reg:DI 134 [ D.5465 ])
                    (reg/f:DI 229)))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:131 -1
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])
            (reg:DI 134 [ D.5465 ]))
        (nil)))
(insn 244 243 245 31 (set (reg/f:DI 136 [ D.5467 ])
        (mem/f:DI (reg/f:DI 135 [ D.5466 ]) [0 *_127+0 S8 A64])) setprimarypolicy.c:131 -1
     (nil))
(insn 245 244 246 31 (parallel [
            (set (reg:DI 230)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -228 [0xffffffffffffff1c])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:131 -1
     (nil))
(insn 246 245 247 31 (set (reg:DI 1 dx)
        (reg:DI 230)) setprimarypolicy.c:131 -1
     (nil))
(insn 247 246 248 31 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7feef3d6a7e0 *.LC13>)) setprimarypolicy.c:131 -1
     (nil))
(insn 248 247 249 31 (set (reg:DI 5 di)
        (reg/f:DI 136 [ D.5467 ])) setprimarypolicy.c:131 -1
     (nil))
(insn 249 248 250 31 (set (reg:QI 0 ax)
        (const_int 0 [0])) setprimarypolicy.c:131 -1
     (nil))
(call_insn 250 249 251 31 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*__isoc99_sscanf") [flags 0x41]  <function_decl 0x7feef41b3ca8 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:131 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(jump_insn 251 250 252 31 (set (pc)
        (label_ref 258)) -1
     (nil)
 -> 258)
(barrier 252 251 253)
(code_label 253 252 254 32 20 "" [1 uses])
(note 254 253 255 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 255 254 256 32 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7feef3d6a870 *.LC14>)) setprimarypolicy.c:134 -1
     (nil))
(call_insn 256 255 257 32 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7feef41b3360 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:134 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(call_insn 257 256 258 32 (call (mem:QI (symbol_ref:DI ("printUsage") [flags 0x3]  <function_decl 0x7feef411f000 printUsage>) [0 printUsage S1 A8])
        (const_int 0 [0])) setprimarypolicy.c:135 -1
     (nil)
    (nil))
(code_label 258 257 259 33 21 "" [1 uses])
(note 259 258 260 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 260 259 261 33 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:137 -1
     (nil))
(insn 261 260 262 33 (set (reg:SI 231)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])) setprimarypolicy.c:138 -1
     (nil))
(insn 262 261 263 33 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 231)
            (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -244 [0xffffffffffffff0c])) [0 argc+0 S4 A32]))) setprimarypolicy.c:138 -1
     (nil))
(jump_insn 263 262 264 33 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 288)
            (pc))) setprimarypolicy.c:138 -1
     (nil)
 -> 288)
(note 264 263 265 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 265 264 266 34 (set (reg:SI 232)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])) setprimarypolicy.c:139 -1
     (nil))
(insn 266 265 267 34 (set (reg:DI 137 [ D.5465 ])
        (sign_extend:DI (reg:SI 232))) setprimarypolicy.c:139 -1
     (nil))
(insn 267 266 268 34 (parallel [
            (set (reg:DI 138 [ D.5465 ])
                (ashift:DI (reg:DI 137 [ D.5465 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:139 -1
     (nil))
(insn 268 267 269 34 (set (reg/f:DI 233)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])) setprimarypolicy.c:139 -1
     (nil))
(insn 269 268 270 34 (parallel [
            (set (reg/f:DI 139 [ D.5466 ])
                (plus:DI (reg:DI 138 [ D.5465 ])
                    (reg/f:DI 233)))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:139 -1
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])
            (reg:DI 138 [ D.5465 ]))
        (nil)))
(insn 270 269 271 34 (set (reg/f:DI 140 [ D.5467 ])
        (mem/f:DI (reg/f:DI 139 [ D.5466 ]) [0 *_135+0 S8 A64])) setprimarypolicy.c:139 -1
     (nil))
(insn 271 270 272 34 (parallel [
            (set (reg:DI 234)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -224 [0xffffffffffffff20])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:139 -1
     (nil))
(insn 272 271 273 34 (set (reg:DI 1 dx)
        (reg:DI 234)) setprimarypolicy.c:139 -1
     (nil))
(insn 273 272 274 34 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7feef3d6a7e0 *.LC13>)) setprimarypolicy.c:139 -1
     (nil))
(insn 274 273 275 34 (set (reg:DI 5 di)
        (reg/f:DI 140 [ D.5467 ])) setprimarypolicy.c:139 -1
     (nil))
(insn 275 274 276 34 (set (reg:QI 0 ax)
        (const_int 0 [0])) setprimarypolicy.c:139 -1
     (nil))
(call_insn 276 275 277 34 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*__isoc99_sscanf") [flags 0x41]  <function_decl 0x7feef41b3ca8 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:139 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 277 276 278 34 (set (reg:SI 141 [ D.5469 ])
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -224 [0xffffffffffffff20])) [0 sessionAttributes0+0 S4 A64])) setprimarypolicy.c:140 -1
     (nil))
(insn 278 277 279 34 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 141 [ D.5469 ])
            (const_int 255 [0xff]))) setprimarypolicy.c:140 -1
     (nil))
(jump_insn 279 278 280 34 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 506)
            (pc))) setprimarypolicy.c:140 612 {*jcc_1}
     (nil)
 -> 506)
(note 280 279 281 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 281 280 282 35 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7feef3d6a900 *.LC15>)) setprimarypolicy.c:141 -1
     (nil))
(call_insn 282 281 283 35 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7feef41b3360 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:141 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(call_insn 283 282 286 35 (call (mem:QI (symbol_ref:DI ("printUsage") [flags 0x3]  <function_decl 0x7feef411f000 printUsage>) [0 printUsage S1 A8])
        (const_int 0 [0])) setprimarypolicy.c:142 -1
     (nil)
    (nil))
(jump_insn 286 283 287 35 (set (pc)
        (label_ref:DI 506)) 654 {jump}
     (nil)
 -> 506)
(barrier 287 286 288)
(code_label 288 287 289 37 22 "" [1 uses])
(note 289 288 290 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 290 289 291 37 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7feef3d6a870 *.LC14>)) setprimarypolicy.c:146 -1
     (nil))
(call_insn 291 290 292 37 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7feef41b3360 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:146 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(call_insn 292 291 295 37 (call (mem:QI (symbol_ref:DI ("printUsage") [flags 0x3]  <function_decl 0x7feef411f000 printUsage>) [0 printUsage S1 A8])
        (const_int 0 [0])) setprimarypolicy.c:147 -1
     (nil)
    (nil))
(jump_insn 295 292 296 37 (set (pc)
        (label_ref 506)) -1
     (nil)
 -> 506)
(barrier 296 295 297)
(code_label 297 296 298 39 19 "" [1 uses])
(note 298 297 299 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 299 298 300 39 (set (reg:SI 235)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])) setprimarypolicy.c:150 -1
     (nil))
(insn 300 299 301 39 (set (reg:DI 142 [ D.5465 ])
        (sign_extend:DI (reg:SI 235))) setprimarypolicy.c:150 -1
     (nil))
(insn 301 300 302 39 (parallel [
            (set (reg:DI 143 [ D.5465 ])
                (ashift:DI (reg:DI 142 [ D.5465 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:150 -1
     (nil))
(insn 302 301 303 39 (set (reg/f:DI 236)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])) setprimarypolicy.c:150 -1
     (nil))
(insn 303 302 304 39 (parallel [
            (set (reg/f:DI 144 [ D.5466 ])
                (plus:DI (reg:DI 143 [ D.5465 ])
                    (reg/f:DI 236)))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:150 -1
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])
            (reg:DI 143 [ D.5465 ]))
        (nil)))
(insn 304 303 305 39 (set (reg/f:DI 145 [ D.5467 ])
        (mem/f:DI (reg/f:DI 144 [ D.5466 ]) [0 *_145+0 S8 A64])) setprimarypolicy.c:150 -1
     (nil))
(insn 305 304 306 39 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7feef3d6a990 *.LC16>)) setprimarypolicy.c:150 -1
     (nil))
(insn 306 305 307 39 (set (reg:DI 5 di)
        (reg/f:DI 145 [ D.5467 ])) setprimarypolicy.c:150 -1
     (nil))
(call_insn/i 307 306 308 39 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7feef41aa0d8 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:150 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 308 307 309 39 (set (reg:SI 146 [ D.5468 ])
        (reg:SI 0 ax)) setprimarypolicy.c:150 -1
     (nil))
(insn 309 308 310 39 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 146 [ D.5468 ])
            (const_int 0 [0]))) setprimarypolicy.c:150 -1
     (nil))
(jump_insn 310 309 311 39 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 375)
            (pc))) setprimarypolicy.c:150 -1
     (nil)
 -> 375)
(note 311 310 312 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 312 311 313 40 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:151 -1
     (nil))
(insn 313 312 314 40 (set (reg:SI 237)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])) setprimarypolicy.c:152 -1
     (nil))
(insn 314 313 315 40 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 237)
            (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -244 [0xffffffffffffff0c])) [0 argc+0 S4 A32]))) setprimarypolicy.c:152 -1
     (nil))
(jump_insn 315 314 316 40 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 331)
            (pc))) setprimarypolicy.c:152 -1
     (nil)
 -> 331)
(note 316 315 317 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 317 316 318 41 (set (reg:SI 238)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])) setprimarypolicy.c:153 -1
     (nil))
(insn 318 317 319 41 (set (reg:DI 147 [ D.5465 ])
        (sign_extend:DI (reg:SI 238))) setprimarypolicy.c:153 -1
     (nil))
(insn 319 318 320 41 (parallel [
            (set (reg:DI 148 [ D.5465 ])
                (ashift:DI (reg:DI 147 [ D.5465 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:153 -1
     (nil))
(insn 320 319 321 41 (set (reg/f:DI 239)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])) setprimarypolicy.c:153 -1
     (nil))
(insn 321 320 322 41 (parallel [
            (set (reg/f:DI 149 [ D.5466 ])
                (plus:DI (reg:DI 148 [ D.5465 ])
                    (reg/f:DI 239)))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:153 -1
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])
            (reg:DI 148 [ D.5465 ]))
        (nil)))
(insn 322 321 323 41 (set (reg/f:DI 150 [ D.5467 ])
        (mem/f:DI (reg/f:DI 149 [ D.5466 ]) [0 *_151+0 S8 A64])) setprimarypolicy.c:153 -1
     (nil))
(insn 323 322 324 41 (parallel [
            (set (reg:DI 240)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -220 [0xffffffffffffff24])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:153 -1
     (nil))
(insn 324 323 325 41 (set (reg:DI 1 dx)
        (reg:DI 240)) setprimarypolicy.c:153 -1
     (nil))
(insn 325 324 326 41 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7feef3d6a7e0 *.LC13>)) setprimarypolicy.c:153 -1
     (nil))
(insn 326 325 327 41 (set (reg:DI 5 di)
        (reg/f:DI 150 [ D.5467 ])) setprimarypolicy.c:153 -1
     (nil))
(insn 327 326 328 41 (set (reg:QI 0 ax)
        (const_int 0 [0])) setprimarypolicy.c:153 -1
     (nil))
(call_insn 328 327 329 41 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*__isoc99_sscanf") [flags 0x41]  <function_decl 0x7feef41b3ca8 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:153 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(jump_insn 329 328 330 41 (set (pc)
        (label_ref 336)) -1
     (nil)
 -> 336)
(barrier 330 329 331)
(code_label 331 330 332 42 26 "" [1 uses])
(note 332 331 333 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 333 332 334 42 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7feef3d6aa20 *.LC17>)) setprimarypolicy.c:156 -1
     (nil))
(call_insn 334 333 335 42 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7feef41b3360 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:156 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(call_insn 335 334 336 42 (call (mem:QI (symbol_ref:DI ("printUsage") [flags 0x3]  <function_decl 0x7feef411f000 printUsage>) [0 printUsage S1 A8])
        (const_int 0 [0])) setprimarypolicy.c:157 -1
     (nil)
    (nil))
(code_label 336 335 337 43 27 "" [1 uses])
(note 337 336 338 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 338 337 339 43 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:159 -1
     (nil))
(insn 339 338 340 43 (set (reg:SI 241)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])) setprimarypolicy.c:160 -1
     (nil))
(insn 340 339 341 43 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 241)
            (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -244 [0xffffffffffffff0c])) [0 argc+0 S4 A32]))) setprimarypolicy.c:160 -1
     (nil))
(jump_insn 341 340 342 43 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 366)
            (pc))) setprimarypolicy.c:160 -1
     (nil)
 -> 366)
(note 342 341 343 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 343 342 344 44 (set (reg:SI 242)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])) setprimarypolicy.c:161 -1
     (nil))
(insn 344 343 345 44 (set (reg:DI 151 [ D.5465 ])
        (sign_extend:DI (reg:SI 242))) setprimarypolicy.c:161 -1
     (nil))
(insn 345 344 346 44 (parallel [
            (set (reg:DI 152 [ D.5465 ])
                (ashift:DI (reg:DI 151 [ D.5465 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:161 -1
     (nil))
(insn 346 345 347 44 (set (reg/f:DI 243)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])) setprimarypolicy.c:161 -1
     (nil))
(insn 347 346 348 44 (parallel [
            (set (reg/f:DI 153 [ D.5466 ])
                (plus:DI (reg:DI 152 [ D.5465 ])
                    (reg/f:DI 243)))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:161 -1
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])
            (reg:DI 152 [ D.5465 ]))
        (nil)))
(insn 348 347 349 44 (set (reg/f:DI 154 [ D.5467 ])
        (mem/f:DI (reg/f:DI 153 [ D.5466 ]) [0 *_159+0 S8 A64])) setprimarypolicy.c:161 -1
     (nil))
(insn 349 348 350 44 (parallel [
            (set (reg:DI 244)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -216 [0xffffffffffffff28])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:161 -1
     (nil))
(insn 350 349 351 44 (set (reg:DI 1 dx)
        (reg:DI 244)) setprimarypolicy.c:161 -1
     (nil))
(insn 351 350 352 44 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7feef3d6a7e0 *.LC13>)) setprimarypolicy.c:161 -1
     (nil))
(insn 352 351 353 44 (set (reg:DI 5 di)
        (reg/f:DI 154 [ D.5467 ])) setprimarypolicy.c:161 -1
     (nil))
(insn 353 352 354 44 (set (reg:QI 0 ax)
        (const_int 0 [0])) setprimarypolicy.c:161 -1
     (nil))
(call_insn 354 353 355 44 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*__isoc99_sscanf") [flags 0x41]  <function_decl 0x7feef41b3ca8 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:161 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 355 354 356 44 (set (reg:SI 155 [ D.5469 ])
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -216 [0xffffffffffffff28])) [0 sessionAttributes1+0 S4 A64])) setprimarypolicy.c:162 -1
     (nil))
(insn 356 355 357 44 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 155 [ D.5469 ])
            (const_int 255 [0xff]))) setprimarypolicy.c:162 -1
     (nil))
(jump_insn 357 356 358 44 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 506)
            (pc))) setprimarypolicy.c:162 612 {*jcc_1}
     (nil)
 -> 506)
(note 358 357 359 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 359 358 360 45 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7feef3d6aab0 *.LC18>)) setprimarypolicy.c:163 -1
     (nil))
(call_insn 360 359 361 45 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7feef41b3360 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:163 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(call_insn 361 360 364 45 (call (mem:QI (symbol_ref:DI ("printUsage") [flags 0x3]  <function_decl 0x7feef411f000 printUsage>) [0 printUsage S1 A8])
        (const_int 0 [0])) setprimarypolicy.c:164 -1
     (nil)
    (nil))
(jump_insn 364 361 365 45 (set (pc)
        (label_ref:DI 506)) 654 {jump}
     (nil)
 -> 506)
(barrier 365 364 366)
(code_label 366 365 367 47 28 "" [1 uses])
(note 367 366 368 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 368 367 369 47 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7feef3d6aa20 *.LC17>)) setprimarypolicy.c:168 -1
     (nil))
(call_insn 369 368 370 47 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7feef41b3360 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:168 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(call_insn 370 369 373 47 (call (mem:QI (symbol_ref:DI ("printUsage") [flags 0x3]  <function_decl 0x7feef411f000 printUsage>) [0 printUsage S1 A8])
        (const_int 0 [0])) setprimarypolicy.c:169 -1
     (nil)
    (nil))
(jump_insn 373 370 374 47 (set (pc)
        (label_ref 506)) -1
     (nil)
 -> 506)
(barrier 374 373 375)
(code_label 375 374 376 49 25 "" [1 uses])
(note 376 375 377 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 377 376 378 49 (set (reg:SI 245)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])) setprimarypolicy.c:172 -1
     (nil))
(insn 378 377 379 49 (set (reg:DI 156 [ D.5465 ])
        (sign_extend:DI (reg:SI 245))) setprimarypolicy.c:172 -1
     (nil))
(insn 379 378 380 49 (parallel [
            (set (reg:DI 157 [ D.5465 ])
                (ashift:DI (reg:DI 156 [ D.5465 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:172 -1
     (nil))
(insn 380 379 381 49 (set (reg/f:DI 246)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])) setprimarypolicy.c:172 -1
     (nil))
(insn 381 380 382 49 (parallel [
            (set (reg/f:DI 158 [ D.5466 ])
                (plus:DI (reg:DI 157 [ D.5465 ])
                    (reg/f:DI 246)))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:172 -1
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])
            (reg:DI 157 [ D.5465 ]))
        (nil)))
(insn 382 381 383 49 (set (reg/f:DI 159 [ D.5467 ])
        (mem/f:DI (reg/f:DI 158 [ D.5466 ]) [0 *_169+0 S8 A64])) setprimarypolicy.c:172 -1
     (nil))
(insn 383 382 384 49 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <var_decl 0x7feef3d6ab40 *.LC19>)) setprimarypolicy.c:172 -1
     (nil))
(insn 384 383 385 49 (set (reg:DI 5 di)
        (reg/f:DI 159 [ D.5467 ])) setprimarypolicy.c:172 -1
     (nil))
(call_insn/i 385 384 386 49 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7feef41aa0d8 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:172 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 386 385 387 49 (set (reg:SI 160 [ D.5468 ])
        (reg:SI 0 ax)) setprimarypolicy.c:172 -1
     (nil))
(insn 387 386 388 49 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 160 [ D.5468 ])
            (const_int 0 [0]))) setprimarypolicy.c:172 -1
     (nil))
(jump_insn 388 387 389 49 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 453)
            (pc))) setprimarypolicy.c:172 -1
     (nil)
 -> 453)
(note 389 388 390 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 390 389 391 50 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:173 -1
     (nil))
(insn 391 390 392 50 (set (reg:SI 247)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])) setprimarypolicy.c:174 -1
     (nil))
(insn 392 391 393 50 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 247)
            (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -244 [0xffffffffffffff0c])) [0 argc+0 S4 A32]))) setprimarypolicy.c:174 -1
     (nil))
(jump_insn 393 392 394 50 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 409)
            (pc))) setprimarypolicy.c:174 -1
     (nil)
 -> 409)
(note 394 393 395 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 395 394 396 51 (set (reg:SI 248)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])) setprimarypolicy.c:175 -1
     (nil))
(insn 396 395 397 51 (set (reg:DI 161 [ D.5465 ])
        (sign_extend:DI (reg:SI 248))) setprimarypolicy.c:175 -1
     (nil))
(insn 397 396 398 51 (parallel [
            (set (reg:DI 162 [ D.5465 ])
                (ashift:DI (reg:DI 161 [ D.5465 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:175 -1
     (nil))
(insn 398 397 399 51 (set (reg/f:DI 249)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])) setprimarypolicy.c:175 -1
     (nil))
(insn 399 398 400 51 (parallel [
            (set (reg/f:DI 163 [ D.5466 ])
                (plus:DI (reg:DI 162 [ D.5465 ])
                    (reg/f:DI 249)))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:175 -1
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])
            (reg:DI 162 [ D.5465 ]))
        (nil)))
(insn 400 399 401 51 (set (reg/f:DI 164 [ D.5467 ])
        (mem/f:DI (reg/f:DI 163 [ D.5466 ]) [0 *_175+0 S8 A64])) setprimarypolicy.c:175 -1
     (nil))
(insn 401 400 402 51 (parallel [
            (set (reg:DI 250)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -212 [0xffffffffffffff2c])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:175 -1
     (nil))
(insn 402 401 403 51 (set (reg:DI 1 dx)
        (reg:DI 250)) setprimarypolicy.c:175 -1
     (nil))
(insn 403 402 404 51 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7feef3d6a7e0 *.LC13>)) setprimarypolicy.c:175 -1
     (nil))
(insn 404 403 405 51 (set (reg:DI 5 di)
        (reg/f:DI 164 [ D.5467 ])) setprimarypolicy.c:175 -1
     (nil))
(insn 405 404 406 51 (set (reg:QI 0 ax)
        (const_int 0 [0])) setprimarypolicy.c:175 -1
     (nil))
(call_insn 406 405 407 51 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*__isoc99_sscanf") [flags 0x41]  <function_decl 0x7feef41b3ca8 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:175 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(jump_insn 407 406 408 51 (set (pc)
        (label_ref 414)) -1
     (nil)
 -> 414)
(barrier 408 407 409)
(code_label 409 408 410 52 32 "" [1 uses])
(note 410 409 411 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 411 410 412 52 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x7feef3d6abd0 *.LC20>)) setprimarypolicy.c:178 -1
     (nil))
(call_insn 412 411 413 52 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7feef41b3360 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:178 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(call_insn 413 412 414 52 (call (mem:QI (symbol_ref:DI ("printUsage") [flags 0x3]  <function_decl 0x7feef411f000 printUsage>) [0 printUsage S1 A8])
        (const_int 0 [0])) setprimarypolicy.c:179 -1
     (nil)
    (nil))
(code_label 414 413 415 53 33 "" [1 uses])
(note 415 414 416 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn 416 415 417 53 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:181 -1
     (nil))
(insn 417 416 418 53 (set (reg:SI 251)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])) setprimarypolicy.c:182 -1
     (nil))
(insn 418 417 419 53 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 251)
            (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -244 [0xffffffffffffff0c])) [0 argc+0 S4 A32]))) setprimarypolicy.c:182 -1
     (nil))
(jump_insn 419 418 420 53 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 444)
            (pc))) setprimarypolicy.c:182 -1
     (nil)
 -> 444)
(note 420 419 421 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn 421 420 422 54 (set (reg:SI 252)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])) setprimarypolicy.c:183 -1
     (nil))
(insn 422 421 423 54 (set (reg:DI 165 [ D.5465 ])
        (sign_extend:DI (reg:SI 252))) setprimarypolicy.c:183 -1
     (nil))
(insn 423 422 424 54 (parallel [
            (set (reg:DI 166 [ D.5465 ])
                (ashift:DI (reg:DI 165 [ D.5465 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:183 -1
     (nil))
(insn 424 423 425 54 (set (reg/f:DI 253)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])) setprimarypolicy.c:183 -1
     (nil))
(insn 425 424 426 54 (parallel [
            (set (reg/f:DI 167 [ D.5466 ])
                (plus:DI (reg:DI 166 [ D.5465 ])
                    (reg/f:DI 253)))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:183 -1
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])
            (reg:DI 166 [ D.5465 ]))
        (nil)))
(insn 426 425 427 54 (set (reg/f:DI 168 [ D.5467 ])
        (mem/f:DI (reg/f:DI 167 [ D.5466 ]) [0 *_183+0 S8 A64])) setprimarypolicy.c:183 -1
     (nil))
(insn 427 426 428 54 (parallel [
            (set (reg:DI 254)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -208 [0xffffffffffffff30])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:183 -1
     (nil))
(insn 428 427 429 54 (set (reg:DI 1 dx)
        (reg:DI 254)) setprimarypolicy.c:183 -1
     (nil))
(insn 429 428 430 54 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7feef3d6a7e0 *.LC13>)) setprimarypolicy.c:183 -1
     (nil))
(insn 430 429 431 54 (set (reg:DI 5 di)
        (reg/f:DI 168 [ D.5467 ])) setprimarypolicy.c:183 -1
     (nil))
(insn 431 430 432 54 (set (reg:QI 0 ax)
        (const_int 0 [0])) setprimarypolicy.c:183 -1
     (nil))
(call_insn 432 431 433 54 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*__isoc99_sscanf") [flags 0x41]  <function_decl 0x7feef41b3ca8 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:183 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 433 432 434 54 (set (reg:SI 169 [ D.5469 ])
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -208 [0xffffffffffffff30])) [0 sessionAttributes2+0 S4 A64])) setprimarypolicy.c:184 -1
     (nil))
(insn 434 433 435 54 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 169 [ D.5469 ])
            (const_int 255 [0xff]))) setprimarypolicy.c:184 -1
     (nil))
(jump_insn 435 434 436 54 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 506)
            (pc))) setprimarypolicy.c:184 612 {*jcc_1}
     (nil)
 -> 506)
(note 436 435 437 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(insn 437 436 438 55 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7feef3d6ac60 *.LC21>)) setprimarypolicy.c:185 -1
     (nil))
(call_insn 438 437 439 55 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7feef41b3360 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:185 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(call_insn 439 438 442 55 (call (mem:QI (symbol_ref:DI ("printUsage") [flags 0x3]  <function_decl 0x7feef411f000 printUsage>) [0 printUsage S1 A8])
        (const_int 0 [0])) setprimarypolicy.c:186 -1
     (nil)
    (nil))
(jump_insn 442 439 443 55 (set (pc)
        (label_ref:DI 506)) 654 {jump}
     (nil)
 -> 506)
(barrier 443 442 444)
(code_label 444 443 445 57 34 "" [1 uses])
(note 445 444 446 57 [bb 57] NOTE_INSN_BASIC_BLOCK)
(insn 446 445 447 57 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x7feef3d6abd0 *.LC20>)) setprimarypolicy.c:190 -1
     (nil))
(call_insn 447 446 448 57 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7feef41b3360 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:190 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(call_insn 448 447 451 57 (call (mem:QI (symbol_ref:DI ("printUsage") [flags 0x3]  <function_decl 0x7feef411f000 printUsage>) [0 printUsage S1 A8])
        (const_int 0 [0])) setprimarypolicy.c:191 -1
     (nil)
    (nil))
(jump_insn 451 448 452 57 (set (pc)
        (label_ref 506)) -1
     (nil)
 -> 506)
(barrier 452 451 453)
(code_label 453 452 454 59 31 "" [1 uses])
(note 454 453 455 59 [bb 59] NOTE_INSN_BASIC_BLOCK)
(insn 455 454 456 59 (set (reg:SI 255)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])) setprimarypolicy.c:194 -1
     (nil))
(insn 456 455 457 59 (set (reg:DI 170 [ D.5465 ])
        (sign_extend:DI (reg:SI 255))) setprimarypolicy.c:194 -1
     (nil))
(insn 457 456 458 59 (parallel [
            (set (reg:DI 171 [ D.5465 ])
                (ashift:DI (reg:DI 170 [ D.5465 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:194 -1
     (nil))
(insn 458 457 459 59 (set (reg/f:DI 256)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])) setprimarypolicy.c:194 -1
     (nil))
(insn 459 458 460 59 (parallel [
            (set (reg/f:DI 172 [ D.5466 ])
                (plus:DI (reg:DI 171 [ D.5465 ])
                    (reg/f:DI 256)))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:194 -1
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])
            (reg:DI 171 [ D.5465 ]))
        (nil)))
(insn 460 459 461 59 (set (reg/f:DI 173 [ D.5467 ])
        (mem/f:DI (reg/f:DI 172 [ D.5466 ]) [0 *_193+0 S8 A64])) setprimarypolicy.c:194 -1
     (nil))
(insn 461 460 462 59 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x7feef3d6acf0 *.LC22>)) setprimarypolicy.c:194 -1
     (nil))
(insn 462 461 463 59 (set (reg:DI 5 di)
        (reg/f:DI 173 [ D.5467 ])) setprimarypolicy.c:194 -1
     (nil))
(call_insn/i 463 462 464 59 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7feef41aa0d8 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:194 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 464 463 465 59 (set (reg:SI 174 [ D.5468 ])
        (reg:SI 0 ax)) setprimarypolicy.c:194 -1
     (nil))
(insn 465 464 466 59 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 174 [ D.5468 ])
            (const_int 0 [0]))) setprimarypolicy.c:194 -1
     (nil))
(jump_insn 466 465 467 59 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 471)
            (pc))) setprimarypolicy.c:194 -1
     (nil)
 -> 471)
(note 467 466 468 60 [bb 60] NOTE_INSN_BASIC_BLOCK)
(call_insn 468 467 469 60 (call (mem:QI (symbol_ref:DI ("printUsage") [flags 0x3]  <function_decl 0x7feef411f000 printUsage>) [0 printUsage S1 A8])
        (const_int 0 [0])) setprimarypolicy.c:195 -1
     (nil)
    (nil))
(jump_insn 469 468 470 60 (set (pc)
        (label_ref 506)) -1
     (nil)
 -> 506)
(barrier 470 469 471)
(code_label 471 470 472 61 37 "" [1 uses])
(note 472 471 473 61 [bb 61] NOTE_INSN_BASIC_BLOCK)
(insn 473 472 474 61 (set (reg:SI 257)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])) setprimarypolicy.c:197 -1
     (nil))
(insn 474 473 475 61 (set (reg:DI 175 [ D.5465 ])
        (sign_extend:DI (reg:SI 257))) setprimarypolicy.c:197 -1
     (nil))
(insn 475 474 476 61 (parallel [
            (set (reg:DI 176 [ D.5465 ])
                (ashift:DI (reg:DI 175 [ D.5465 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:197 -1
     (nil))
(insn 476 475 477 61 (set (reg/f:DI 258)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])) setprimarypolicy.c:197 -1
     (nil))
(insn 477 476 478 61 (parallel [
            (set (reg/f:DI 177 [ D.5466 ])
                (plus:DI (reg:DI 176 [ D.5465 ])
                    (reg/f:DI 258)))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:197 -1
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])
            (reg:DI 176 [ D.5465 ]))
        (nil)))
(insn 478 477 479 61 (set (reg/f:DI 178 [ D.5467 ])
        (mem/f:DI (reg/f:DI 177 [ D.5466 ]) [0 *_199+0 S8 A64])) setprimarypolicy.c:197 -1
     (nil))
(insn 479 478 480 61 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x7feef3d6ad80 *.LC23>)) setprimarypolicy.c:197 -1
     (nil))
(insn 480 479 481 61 (set (reg:DI 5 di)
        (reg/f:DI 178 [ D.5467 ])) setprimarypolicy.c:197 -1
     (nil))
(call_insn/i 481 480 482 61 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7feef41aa0d8 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:197 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 482 481 483 61 (set (reg:SI 179 [ D.5468 ])
        (reg:SI 0 ax)) setprimarypolicy.c:197 -1
     (nil))
(insn 483 482 484 61 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 179 [ D.5468 ])
            (const_int 0 [0]))) setprimarypolicy.c:197 -1
     (nil))
(jump_insn 484 483 485 61 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 493)
            (pc))) setprimarypolicy.c:197 -1
     (nil)
 -> 493)
(note 485 484 486 62 [bb 62] NOTE_INSN_BASIC_BLOCK)
(insn 486 485 487 62 (set (mem/c:SI (symbol_ref:DI ("verbose") [flags 0x2]  <var_decl 0x7feef3f72090 verbose>) [0 verbose+0 S4 A32])
        (const_int 1 [0x1])) setprimarypolicy.c:198 -1
     (nil))
(insn 487 486 488 62 (set (reg:DI 1 dx)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x7feef3d6ae10 *.LC24>)) setprimarypolicy.c:199 -1
     (nil))
(insn 488 487 489 62 (set (reg:SI 4 si)
        (const_int 1 [0x1])) setprimarypolicy.c:199 -1
     (nil))
(insn 489 488 490 62 (set (reg:DI 5 di)
        (const_int 0 [0])) setprimarypolicy.c:199 -1
     (nil))
(call_insn 490 489 491 62 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("TSS_SetProperty") [flags 0x41]  <function_decl 0x7feef4116000 TSS_SetProperty>) [0 TSS_SetProperty S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:199 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(jump_insn 491 490 492 62 (set (pc)
        (label_ref 506)) -1
     (nil)
 -> 506)
(barrier 492 491 493)
(code_label 493 492 494 63 38 "" [1 uses])
(note 494 493 495 63 [bb 63] NOTE_INSN_BASIC_BLOCK)
(insn 495 494 496 63 (set (reg:SI 259)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])) setprimarypolicy.c:202 -1
     (nil))
(insn 496 495 497 63 (set (reg:DI 180 [ D.5465 ])
        (sign_extend:DI (reg:SI 259))) setprimarypolicy.c:202 -1
     (nil))
(insn 497 496 498 63 (parallel [
            (set (reg:DI 181 [ D.5465 ])
                (ashift:DI (reg:DI 180 [ D.5465 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:202 -1
     (nil))
(insn 498 497 499 63 (set (reg/f:DI 260)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])) setprimarypolicy.c:202 -1
     (nil))
(insn 499 498 500 63 (parallel [
            (set (reg/f:DI 182 [ D.5466 ])
                (plus:DI (reg:DI 181 [ D.5465 ])
                    (reg/f:DI 260)))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:202 -1
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -256 [0xffffffffffffff00])) [0 argv+0 S8 A64])
            (reg:DI 181 [ D.5465 ]))
        (nil)))
(insn 500 499 501 63 (set (reg/f:DI 183 [ D.5467 ])
        (mem/f:DI (reg/f:DI 182 [ D.5466 ]) [0 *_206+0 S8 A64])) setprimarypolicy.c:202 -1
     (nil))
(insn 501 500 502 63 (set (reg:DI 4 si)
        (reg/f:DI 183 [ D.5467 ])) setprimarypolicy.c:202 -1
     (nil))
(insn 502 501 503 63 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x7feef3d6aea0 *.LC25>)) setprimarypolicy.c:202 -1
     (nil))
(insn 503 502 504 63 (set (reg:QI 0 ax)
        (const_int 0 [0])) setprimarypolicy.c:202 -1
     (nil))
(call_insn 504 503 505 63 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7feef41b0ca8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:202 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(call_insn 505 504 506 63 (call (mem:QI (symbol_ref:DI ("printUsage") [flags 0x3]  <function_decl 0x7feef411f000 printUsage>) [0 printUsage S1 A8])
        (const_int 0 [0])) setprimarypolicy.c:203 -1
     (nil)
    (nil))
(code_label 506 505 507 64 6 "" [21 uses])
(note 507 506 508 64 [bb 64] NOTE_INSN_BASIC_BLOCK)
(insn 508 507 509 64 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                            (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:78 -1
     (nil))
(code_label 509 508 510 65 2 "" [1 uses])
(note 510 509 511 65 [bb 65] NOTE_INSN_BASIC_BLOCK)
(insn 511 510 512 65 (set (reg:SI 261)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -200 [0xffffffffffffff38])) [0 i+0 S4 A32])) setprimarypolicy.c:78 -1
     (nil))
(insn 512 511 513 65 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 261)
            (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -244 [0xffffffffffffff0c])) [0 argc+0 S4 A32]))) setprimarypolicy.c:78 -1
     (nil))
(jump_insn 513 512 514 65 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 518)
            (pc))) setprimarypolicy.c:78 -1
     (nil)
 -> 518)
(note 514 513 516 66 [bb 66] NOTE_INSN_BASIC_BLOCK)
(insn 516 514 517 66 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -204 [0xffffffffffffff34])) [0 rc+0 S4 A32])
            (const_int 0 [0]))) setprimarypolicy.c:78 -1
     (nil))
(jump_insn 517 516 518 66 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 515)
            (pc))) setprimarypolicy.c:78 -1
     (nil)
 -> 515)
(code_label 518 517 519 67 39 "" [1 uses])
(note 519 518 520 67 [bb 67] NOTE_INSN_BASIC_BLOCK)
(insn 520 519 521 67 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -152 [0xffffffffffffff68])) [0 policyFilename+0 S8 A64])
            (const_int 0 [0]))) setprimarypolicy.c:206 -1
     (nil))
(jump_insn 521 520 522 67 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 534)
            (pc))) setprimarypolicy.c:206 -1
     (nil)
 -> 534)
(note 522 521 523 68 [bb 68] NOTE_INSN_BASIC_BLOCK)
(insn 523 522 524 68 (set (reg:HI 184 [ D.5470 ])
        (mem/j/c:HI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -10 [0xfffffffffffffff6])) [0 in.hashAlg+0 S2 A16])) setprimarypolicy.c:207 -1
     (nil))
(insn 524 523 525 68 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 184 [ D.5470 ])
            (const_int 16 [0x10]))) setprimarypolicy.c:207 -1
     (nil))
(jump_insn 525 524 526 68 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 543)
            (pc))) setprimarypolicy.c:207 612 {*jcc_1}
     (nil)
 -> 543)
(note 526 525 527 69 [bb 69] NOTE_INSN_BASIC_BLOCK)
(insn 527 526 528 69 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC26") [flags 0x2]  <var_decl 0x7feef3d6af30 *.LC26>)) setprimarypolicy.c:208 -1
     (nil))
(call_insn 528 527 529 69 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7feef41b3360 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:208 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(call_insn 529 528 532 69 (call (mem:QI (symbol_ref:DI ("printUsage") [flags 0x3]  <function_decl 0x7feef411f000 printUsage>) [0 printUsage S1 A8])
        (const_int 0 [0])) setprimarypolicy.c:209 -1
     (nil)
    (nil))
(jump_insn 532 529 533 69 (set (pc)
        (label_ref 543)) -1
     (nil)
 -> 543)
(barrier 533 532 534)
(code_label 534 533 535 71 41 "" [1 uses])
(note 535 534 536 71 [bb 71] NOTE_INSN_BASIC_BLOCK)
(insn 536 535 537 71 (set (reg:HI 185 [ D.5470 ])
        (mem/j/c:HI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -10 [0xfffffffffffffff6])) [0 in.hashAlg+0 S2 A16])) setprimarypolicy.c:213 -1
     (nil))
(insn 537 536 538 71 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 185 [ D.5470 ])
            (const_int 16 [0x10]))) setprimarypolicy.c:213 -1
     (nil))
(jump_insn 538 537 539 71 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 543)
            (pc))) setprimarypolicy.c:213 -1
     (nil)
 -> 543)
(note 539 538 540 72 [bb 72] NOTE_INSN_BASIC_BLOCK)
(insn 540 539 541 72 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x7feef3d81000 *.LC27>)) setprimarypolicy.c:214 -1
     (nil))
(call_insn 541 540 542 72 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7feef41b3360 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:214 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(call_insn 542 541 543 72 (call (mem:QI (symbol_ref:DI ("printUsage") [flags 0x3]  <function_decl 0x7feef411f000 printUsage>) [0 printUsage S1 A8])
        (const_int 0 [0])) setprimarypolicy.c:215 -1
     (nil)
    (nil))
(code_label 543 542 544 73 43 "" [3 uses])
(note 544 543 545 73 [bb 73] NOTE_INSN_BASIC_BLOCK)
(insn 545 544 546 73 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -204 [0xffffffffffffff34])) [0 rc+0 S4 A32])
            (const_int 0 [0]))) setprimarypolicy.c:219 -1
     (nil))
(jump_insn 546 545 547 73 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 583)
            (pc))) setprimarypolicy.c:219 -1
     (nil)
 -> 583)
(note 547 546 548 74 [bb 74] NOTE_INSN_BASIC_BLOCK)
(insn 548 547 549 74 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -229 [0xffffffffffffff1b])) [0 authHandleChar+0 S1 A8])
            (const_int 108 [0x6c]))) setprimarypolicy.c:220 -1
     (nil))
(jump_insn 549 548 550 74 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 554)
            (pc))) setprimarypolicy.c:220 -1
     (nil)
 -> 554)
(note 550 549 551 75 [bb 75] NOTE_INSN_BASIC_BLOCK)
(insn 551 550 552 75 (set (mem/j/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -144 [0xffffffffffffff70])) [0 in.authHandle+0 S4 A64])
        (const_int 1073741834 [0x4000000a])) setprimarypolicy.c:221 -1
     (nil))
(jump_insn 552 551 553 75 (set (pc)
        (label_ref 583)) -1
     (nil)
 -> 583)
(barrier 553 552 554)
(code_label 554 553 555 76 45 "" [1 uses])
(note 555 554 556 76 [bb 76] NOTE_INSN_BASIC_BLOCK)
(insn 556 555 557 76 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -229 [0xffffffffffffff1b])) [0 authHandleChar+0 S1 A8])
            (const_int 101 [0x65]))) setprimarypolicy.c:223 -1
     (nil))
(jump_insn 557 556 558 76 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 562)
            (pc))) setprimarypolicy.c:223 -1
     (nil)
 -> 562)
(note 558 557 559 77 [bb 77] NOTE_INSN_BASIC_BLOCK)
(insn 559 558 560 77 (set (mem/j/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -144 [0xffffffffffffff70])) [0 in.authHandle+0 S4 A64])
        (const_int 1073741835 [0x4000000b])) setprimarypolicy.c:224 -1
     (nil))
(jump_insn 560 559 561 77 (set (pc)
        (label_ref 583)) -1
     (nil)
 -> 583)
(barrier 561 560 562)
(code_label 562 561 563 78 46 "" [1 uses])
(note 563 562 564 78 [bb 78] NOTE_INSN_BASIC_BLOCK)
(insn 564 563 565 78 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -229 [0xffffffffffffff1b])) [0 authHandleChar+0 S1 A8])
            (const_int 111 [0x6f]))) setprimarypolicy.c:226 -1
     (nil))
(jump_insn 565 564 566 78 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 570)
            (pc))) setprimarypolicy.c:226 -1
     (nil)
 -> 570)
(note 566 565 567 79 [bb 79] NOTE_INSN_BASIC_BLOCK)
(insn 567 566 568 79 (set (mem/j/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -144 [0xffffffffffffff70])) [0 in.authHandle+0 S4 A64])
        (const_int 1073741825 [0x40000001])) setprimarypolicy.c:227 -1
     (nil))
(jump_insn 568 567 569 79 (set (pc)
        (label_ref 583)) -1
     (nil)
 -> 583)
(barrier 569 568 570)
(code_label 570 569 571 80 47 "" [1 uses])
(note 571 570 572 80 [bb 80] NOTE_INSN_BASIC_BLOCK)
(insn 572 571 573 80 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -229 [0xffffffffffffff1b])) [0 authHandleChar+0 S1 A8])
            (const_int 112 [0x70]))) setprimarypolicy.c:229 -1
     (nil))
(jump_insn 573 572 574 80 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 578)
            (pc))) setprimarypolicy.c:229 -1
     (nil)
 -> 578)
(note 574 573 575 81 [bb 81] NOTE_INSN_BASIC_BLOCK)
(insn 575 574 576 81 (set (mem/j/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -144 [0xffffffffffffff70])) [0 in.authHandle+0 S4 A64])
        (const_int 1073741836 [0x4000000c])) setprimarypolicy.c:230 -1
     (nil))
(jump_insn 576 575 577 81 (set (pc)
        (label_ref 583)) -1
     (nil)
 -> 583)
(barrier 577 576 578)
(code_label 578 577 579 82 48 "" [1 uses])
(note 579 578 580 82 [bb 82] NOTE_INSN_BASIC_BLOCK)
(insn 580 579 581 82 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC28") [flags 0x2]  <var_decl 0x7feef3d81090 *.LC28>)) setprimarypolicy.c:233 -1
     (nil))
(call_insn 581 580 582 82 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7feef41b3360 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:233 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(call_insn 582 581 583 82 (call (mem:QI (symbol_ref:DI ("printUsage") [flags 0x3]  <function_decl 0x7feef411f000 printUsage>) [0 printUsage S1 A8])
        (const_int 0 [0])) setprimarypolicy.c:234 -1
     (nil)
    (nil))
(code_label 583 582 584 83 44 "" [5 uses])
(note 584 583 585 83 [bb 83] NOTE_INSN_BASIC_BLOCK)
(insn 585 584 586 83 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -152 [0xffffffffffffff68])) [0 policyFilename+0 S8 A64])
            (const_int 0 [0]))) setprimarypolicy.c:238 -1
     (nil))
(jump_insn 586 585 587 83 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 599)
            (pc))) setprimarypolicy.c:238 -1
     (nil)
 -> 599)
(note 587 586 588 84 [bb 84] NOTE_INSN_BASIC_BLOCK)
(insn 588 587 589 84 (set (reg:DI 262)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -152 [0xffffffffffffff68])) [0 policyFilename+0 S8 A64])) setprimarypolicy.c:239 -1
     (nil))
(insn 589 588 590 84 (parallel [
            (set (reg:DI 263)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -144 [0xffffffffffffff70])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:239 -1
     (nil))
(insn 590 589 591 84 (parallel [
            (set (reg:DI 264)
                (plus:DI (reg:DI 263)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:239 -1
     (nil))
(insn 591 590 592 84 (set (reg:DI 1 dx)
        (reg:DI 262)) setprimarypolicy.c:239 -1
     (nil))
(insn 592 591 593 84 (set (reg:SI 4 si)
        (const_int 128 [0x80])) setprimarypolicy.c:239 -1
     (nil))
(insn 593 592 594 84 (set (reg:DI 5 di)
        (reg:DI 264)) setprimarypolicy.c:239 -1
     (nil))
(call_insn 594 593 595 84 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("TSS_File_Read2B") [flags 0x41]  <function_decl 0x7feef4116ca8 TSS_File_Read2B>) [0 TSS_File_Read2B S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:239 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 595 594 596 84 (set (reg:SI 265)
        (reg:SI 0 ax)) setprimarypolicy.c:239 -1
     (nil))
(insn 596 595 597 84 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -204 [0xffffffffffffff34])) [0 rc+0 S4 A32])
        (reg:SI 265)) setprimarypolicy.c:239 -1
     (nil))
(jump_insn 597 596 598 84 (set (pc)
        (label_ref 602)) -1
     (nil)
 -> 602)
(barrier 598 597 599)
(code_label 599 598 600 85 49 "" [1 uses])
(note 600 599 601 85 [bb 85] NOTE_INSN_BASIC_BLOCK)
(insn 601 600 602 85 (set (mem/j/c:HI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -140 [0xffffffffffffff74])) [0 in.authPolicy.t.size+0 S2 A32])
        (const_int 0 [0])) setprimarypolicy.c:244 -1
     (nil))
(code_label 602 601 603 86 50 "" [1 uses])
(note 603 602 604 86 [bb 86] NOTE_INSN_BASIC_BLOCK)
(insn 604 603 605 86 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -204 [0xffffffffffffff34])) [0 rc+0 S4 A32])
            (const_int 0 [0]))) setprimarypolicy.c:247 -1
     (nil))
(jump_insn 605 604 606 86 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 612)
            (pc))) setprimarypolicy.c:247 -1
     (nil)
 -> 612)
(note 606 605 607 87 [bb 87] NOTE_INSN_BASIC_BLOCK)
(insn 607 606 608 87 (parallel [
            (set (reg:DI 266)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -192 [0xffffffffffffff40])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:248 -1
     (nil))
(insn 608 607 609 87 (set (reg:DI 5 di)
        (reg:DI 266)) setprimarypolicy.c:248 -1
     (nil))
(call_insn 609 608 610 87 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("TSS_Create") [flags 0x41]  <function_decl 0x7feef410eca8 TSS_Create>) [0 TSS_Create S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:248 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 610 609 611 87 (set (reg:SI 267)
        (reg:SI 0 ax)) setprimarypolicy.c:248 -1
     (nil))
(insn 611 610 612 87 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -204 [0xffffffffffffff34])) [0 rc+0 S4 A32])
        (reg:SI 267)) setprimarypolicy.c:248 -1
     (nil))
(code_label 612 611 613 88 51 "" [1 uses])
(note 613 612 614 88 [bb 88] NOTE_INSN_BASIC_BLOCK)
(insn 614 613 615 88 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -204 [0xffffffffffffff34])) [0 rc+0 S4 A32])
            (const_int 0 [0]))) setprimarypolicy.c:251 -1
     (nil))
(jump_insn 615 614 616 88 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 648)
            (pc))) setprimarypolicy.c:251 -1
     (nil)
 -> 648)
(note 616 615 617 89 [bb 89] NOTE_INSN_BASIC_BLOCK)
(insn 617 616 618 89 (set (reg:SI 186 [ D.5469 ])
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -208 [0xffffffffffffff30])) [0 sessionAttributes2+0 S4 A64])) setprimarypolicy.c:252 -1
     (nil))
(insn 618 617 619 89 (set (reg:SI 187 [ D.5469 ])
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -212 [0xffffffffffffff2c])) [0 sessionHandle2+0 S4 A32])) setprimarypolicy.c:252 -1
     (nil))
(insn 619 618 620 89 (set (reg:SI 188 [ D.5469 ])
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -216 [0xffffffffffffff28])) [0 sessionAttributes1+0 S4 A64])) setprimarypolicy.c:252 -1
     (nil))
(insn 620 619 621 89 (set (reg:SI 189 [ D.5469 ])
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -220 [0xffffffffffffff24])) [0 sessionHandle1+0 S4 A32])) setprimarypolicy.c:252 -1
     (nil))
(insn 621 620 622 89 (set (reg:SI 190 [ D.5469 ])
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -224 [0xffffffffffffff20])) [0 sessionAttributes0+0 S4 A64])) setprimarypolicy.c:252 -1
     (nil))
(insn 622 621 623 89 (set (reg:SI 191 [ D.5469 ])
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -228 [0xffffffffffffff1c])) [0 sessionHandle0+0 S4 A32])) setprimarypolicy.c:252 -1
     (nil))
(insn 623 622 624 89 (set (reg/f:DI 192 [ D.5471 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -192 [0xffffffffffffff40])) [0 tssContext+0 S8 A64])) setprimarypolicy.c:252 -1
     (nil))
(insn 624 623 625 89 (parallel [
            (set (reg:DI 268)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -144 [0xffffffffffffff70])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:252 -1
     (nil))
(insn 625 624 626 89 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:252 -1
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 626 625 627 89 (set (mem:SI (pre_modify:DI (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8]))) [0  S4 A32])
        (const_int 0 [0])) setprimarypolicy.c:252 -1
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 627 626 628 89 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (const_int 0 [0])) setprimarypolicy.c:252 -1
     (expr_list:REG_ARGS_SIZE (const_int 24 [0x18])
        (nil)))
(insn 628 627 629 89 (set (mem:SI (pre_modify:DI (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8]))) [0  S4 A32])
        (const_int 1073741831 [0x40000007])) setprimarypolicy.c:252 -1
     (expr_list:REG_ARGS_SIZE (const_int 32 [0x20])
        (nil)))
(insn 629 628 630 89 (set (mem:SI (pre_modify:DI (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8]))) [0  S4 A32])
        (reg:SI 186 [ D.5469 ])) setprimarypolicy.c:252 -1
     (expr_list:REG_ARGS_SIZE (const_int 40 [0x28])
        (nil)))
(insn 630 629 631 89 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (const_int 0 [0])) setprimarypolicy.c:252 -1
     (expr_list:REG_ARGS_SIZE (const_int 48 [0x30])
        (nil)))
(insn 631 630 632 89 (set (mem:SI (pre_modify:DI (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8]))) [0  S4 A32])
        (reg:SI 187 [ D.5469 ])) setprimarypolicy.c:252 -1
     (expr_list:REG_ARGS_SIZE (const_int 56 [0x38])
        (nil)))
(insn 632 631 633 89 (set (mem:SI (pre_modify:DI (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8]))) [0  S4 A32])
        (reg:SI 188 [ D.5469 ])) setprimarypolicy.c:252 -1
     (expr_list:REG_ARGS_SIZE (const_int 64 [0x40])
        (nil)))
(insn 633 632 634 89 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (const_int 0 [0])) setprimarypolicy.c:252 -1
     (expr_list:REG_ARGS_SIZE (const_int 72 [0x48])
        (nil)))
(insn 634 633 635 89 (set (mem:SI (pre_modify:DI (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8]))) [0  S4 A32])
        (reg:SI 189 [ D.5469 ])) setprimarypolicy.c:252 -1
     (expr_list:REG_ARGS_SIZE (const_int 80 [0x50])
        (nil)))
(insn 635 634 636 89 (set (mem:SI (pre_modify:DI (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8]))) [0  S4 A32])
        (reg:SI 190 [ D.5469 ])) setprimarypolicy.c:252 -1
     (expr_list:REG_ARGS_SIZE (const_int 88 [0x58])
        (nil)))
(insn 636 635 637 89 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -160 [0xffffffffffffff60])) [0 authPassword+0 S8 A64])) setprimarypolicy.c:252 -1
     (expr_list:REG_ARGS_SIZE (const_int 96 [0x60])
        (nil)))
(insn 637 636 638 89 (set (reg:SI 38 r9)
        (reg:SI 191 [ D.5469 ])) setprimarypolicy.c:252 -1
     (nil))
(insn 638 637 639 89 (set (reg:SI 37 r8)
        (const_int 302 [0x12e])) setprimarypolicy.c:252 -1
     (nil))
(insn 639 638 640 89 (set (reg:DI 2 cx)
        (const_int 0 [0])) setprimarypolicy.c:252 -1
     (nil))
(insn 640 639 641 89 (set (reg:DI 1 dx)
        (reg:DI 268)) setprimarypolicy.c:252 -1
     (nil))
(insn 641 640 642 89 (set (reg:DI 4 si)
        (const_int 0 [0])) setprimarypolicy.c:252 -1
     (nil))
(insn 642 641 643 89 (set (reg:DI 5 di)
        (reg/f:DI 192 [ D.5471 ])) setprimarypolicy.c:252 -1
     (nil))
(insn 643 642 644 89 (set (reg:QI 0 ax)
        (const_int 0 [0])) setprimarypolicy.c:252 -1
     (nil))
(call_insn 644 643 645 89 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("TSS_Execute") [flags 0x41]  <function_decl 0x7feef410ee58 TSS_Execute>) [0 TSS_Execute S1 A8])
            (const_int 96 [0x60]))) setprimarypolicy.c:252 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (expr_list:SI (use (reg:SI 37 r8))
                            (expr_list:SI (use (reg:SI 38 r9))
                                (nil)))))))))
(insn 645 644 646 89 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 96 [0x60])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:252 -1
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 646 645 647 89 (set (reg:SI 269)
        (reg:SI 0 ax)) setprimarypolicy.c:252 -1
     (nil))
(insn 647 646 648 89 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -204 [0xffffffffffffff34])) [0 rc+0 S4 A32])
        (reg:SI 269)) setprimarypolicy.c:252 -1
     (nil))
(code_label 648 647 649 90 52 "" [1 uses])
(note 649 648 650 90 [bb 90] NOTE_INSN_BASIC_BLOCK)
(insn 650 649 651 90 (set (reg/f:DI 193 [ D.5471 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -192 [0xffffffffffffff40])) [0 tssContext+0 S8 A64])) setprimarypolicy.c:263 -1
     (nil))
(insn 651 650 652 90 (set (reg:DI 5 di)
        (reg/f:DI 193 [ D.5471 ])) setprimarypolicy.c:263 -1
     (nil))
(call_insn 652 651 653 90 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("TSS_Delete") [flags 0x41]  <function_decl 0x7feef410ed80 TSS_Delete>) [0 TSS_Delete S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:263 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 653 652 654 90 (set (reg:SI 270)
        (reg:SI 0 ax)) setprimarypolicy.c:263 -1
     (nil))
(insn 654 653 655 90 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -196 [0xffffffffffffff3c])) [0 rc1+0 S4 A32])
        (reg:SI 270)) setprimarypolicy.c:263 -1
     (nil))
(insn 655 654 656 90 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -204 [0xffffffffffffff34])) [0 rc+0 S4 A32])
            (const_int 0 [0]))) setprimarypolicy.c:264 -1
     (nil))
(jump_insn 656 655 657 90 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 660)
            (pc))) setprimarypolicy.c:264 -1
     (nil)
 -> 660)
(note 657 656 658 91 [bb 91] NOTE_INSN_BASIC_BLOCK)
(insn 658 657 659 91 (set (reg:SI 271)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -196 [0xffffffffffffff3c])) [0 rc1+0 S4 A32])) setprimarypolicy.c:265 -1
     (nil))
(insn 659 658 660 91 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -204 [0xffffffffffffff34])) [0 rc+0 S4 A32])
        (reg:SI 271)) setprimarypolicy.c:265 -1
     (nil))
(code_label 660 659 661 92 53 "" [1 uses])
(note 661 660 662 92 [bb 92] NOTE_INSN_BASIC_BLOCK)
(insn 662 661 663 92 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -204 [0xffffffffffffff34])) [0 rc+0 S4 A32])
            (const_int 0 [0]))) setprimarypolicy.c:268 -1
     (nil))
(jump_insn 663 662 664 92 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 675)
            (pc))) setprimarypolicy.c:268 -1
     (nil)
 -> 675)
(note 664 663 665 93 [bb 93] NOTE_INSN_BASIC_BLOCK)
(insn 665 664 666 93 (set (reg:SI 194 [ D.5468 ])
        (mem/c:SI (symbol_ref:DI ("verbose") [flags 0x2]  <var_decl 0x7feef3f72090 verbose>) [0 verbose+0 S4 A32])) setprimarypolicy.c:269 -1
     (nil))
(insn 666 665 667 93 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 194 [ D.5468 ])
            (const_int 0 [0]))) setprimarypolicy.c:269 -1
     (nil))
(jump_insn 667 666 668 93 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 701)
            (pc))) setprimarypolicy.c:269 612 {*jcc_1}
     (nil)
 -> 701)
(note 668 667 669 94 [bb 94] NOTE_INSN_BASIC_BLOCK)
(insn 669 668 670 94 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC29") [flags 0x2]  <var_decl 0x7feef3d81120 *.LC29>)) setprimarypolicy.c:269 -1
     (nil))
(call_insn 670 669 673 94 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7feef41b3360 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:269 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 673 670 674 94 (set (pc)
        (label_ref 701)) -1
     (nil)
 -> 701)
(barrier 674 673 675)
(code_label 675 674 676 96 54 "" [1 uses])
(note 676 675 677 96 [bb 96] NOTE_INSN_BASIC_BLOCK)
(insn 677 676 678 96 (set (reg:SI 272)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -204 [0xffffffffffffff34])) [0 rc+0 S4 A32])) setprimarypolicy.c:275 -1
     (nil))
(insn 678 677 679 96 (set (reg:SI 4 si)
        (reg:SI 272)) setprimarypolicy.c:275 -1
     (nil))
(insn 679 678 680 96 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC30") [flags 0x2]  <var_decl 0x7feef3d811b0 *.LC30>)) setprimarypolicy.c:275 -1
     (nil))
(insn 680 679 681 96 (set (reg:QI 0 ax)
        (const_int 0 [0])) setprimarypolicy.c:275 -1
     (nil))
(call_insn 681 680 682 96 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7feef41b0ca8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:275 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 682 681 683 96 (set (reg:SI 273)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -204 [0xffffffffffffff34])) [0 rc+0 S4 A32])) setprimarypolicy.c:276 -1
     (nil))
(insn 683 682 684 96 (parallel [
            (set (reg:DI 274)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -168 [0xffffffffffffff58])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:276 -1
     (nil))
(insn 684 683 685 96 (parallel [
            (set (reg:DI 275)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -176 [0xffffffffffffff50])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:276 -1
     (nil))
(insn 685 684 686 96 (parallel [
            (set (reg:DI 276)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -184 [0xffffffffffffff48])))
            (clobber (reg:CC 17 flags))
        ]) setprimarypolicy.c:276 -1
     (nil))
(insn 686 685 687 96 (set (reg:SI 2 cx)
        (reg:SI 273)) setprimarypolicy.c:276 -1
     (nil))
(insn 687 686 688 96 (set (reg:DI 1 dx)
        (reg:DI 274)) setprimarypolicy.c:276 -1
     (nil))
(insn 688 687 689 96 (set (reg:DI 4 si)
        (reg:DI 275)) setprimarypolicy.c:276 -1
     (nil))
(insn 689 688 690 96 (set (reg:DI 5 di)
        (reg:DI 276)) setprimarypolicy.c:276 -1
     (nil))
(call_insn 690 689 691 96 (call (mem:QI (symbol_ref:DI ("TSS_ResponseCode_toString") [flags 0x41]  <function_decl 0x7feef4116e58 TSS_ResponseCode_toString>) [0 TSS_ResponseCode_toString S1 A8])
        (const_int 0 [0])) setprimarypolicy.c:276 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (nil))))))
(insn 691 690 692 96 (set (reg/f:DI 195 [ D.5472 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -168 [0xffffffffffffff58])) [0 num+0 S8 A64])) setprimarypolicy.c:277 -1
     (nil))
(insn 692 691 693 96 (set (reg/f:DI 196 [ D.5472 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -176 [0xffffffffffffff50])) [0 submsg+0 S8 A64])) setprimarypolicy.c:277 -1
     (nil))
(insn 693 692 694 96 (set (reg/f:DI 197 [ D.5472 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -184 [0xffffffffffffff48])) [0 msg+0 S8 A64])) setprimarypolicy.c:277 -1
     (nil))
(insn 694 693 695 96 (set (reg:DI 2 cx)
        (reg/f:DI 195 [ D.5472 ])) setprimarypolicy.c:277 -1
     (nil))
(insn 695 694 696 96 (set (reg:DI 1 dx)
        (reg/f:DI 196 [ D.5472 ])) setprimarypolicy.c:277 -1
     (nil))
(insn 696 695 697 96 (set (reg:DI 4 si)
        (reg/f:DI 197 [ D.5472 ])) setprimarypolicy.c:277 -1
     (nil))
(insn 697 696 698 96 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC31") [flags 0x2]  <var_decl 0x7feef3d81240 *.LC31>)) setprimarypolicy.c:277 -1
     (nil))
(insn 698 697 699 96 (set (reg:QI 0 ax)
        (const_int 0 [0])) setprimarypolicy.c:277 -1
     (nil))
(call_insn 699 698 700 96 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7feef41b0ca8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:277 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (nil)))))))
(insn 700 699 701 96 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -204 [0xffffffffffffff34])) [0 rc+0 S4 A32])
        (const_int 1 [0x1])) setprimarypolicy.c:278 -1
     (nil))
(code_label 701 700 702 97 56 "" [2 uses])
(note 702 701 703 97 [bb 97] NOTE_INSN_BASIC_BLOCK)
(insn 703 702 706 97 (set (reg:SI 198 [ D.5468 ])
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -204 [0xffffffffffffff34])) [0 rc+0 S4 A32])) setprimarypolicy.c:280 -1
     (nil))
(insn 706 703 710 97 (set (reg:SI 199 [ <retval> ])
        (reg:SI 198 [ D.5468 ])) -1
     (nil))
(insn 710 706 711 97 (set (reg/i:SI 0 ax)
        (reg:SI 199 [ <retval> ])) setprimarypolicy.c:281 -1
     (nil))
(insn 711 710 712 97 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                                (const_int -8 [0xfffffffffffffff8])) [0 D.5473+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (scratch:DI))
        ]) setprimarypolicy.c:281 -1
     (nil))
(jump_insn 712 711 718 97 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 715)
            (pc))) setprimarypolicy.c:281 -1
     (nil)
 -> 715)
(note 718 712 713 100 [bb 100] NOTE_INSN_BASIC_BLOCK)
(call_insn 713 718 714 100 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7feef411f510 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) setprimarypolicy.c:281 -1
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
(barrier 714 713 715)
(code_label 715 714 719 101 58 "" [1 uses])
(note 719 715 716 101 [bb 101] NOTE_INSN_BASIC_BLOCK)
(insn 716 719 0 101 (use (reg/i:SI 0 ax)) setprimarypolicy.c:281 -1
     (nil))

;; Function printUsage (printUsage, funcdef_no=3, decl_uid=5213, cgraph_uid=3, symbol_order=4)


;; Generating RTL for gimple basic block 2
deleting block 4


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.


try_optimize_cfg iteration 2



;;
;; Full RTL generated for this function:
;;
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 5 di)
        (const_int 10 [0xa])) setprimarypolicy.c:285 -1
     (nil))
(call_insn 6 5 7 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("putchar") [flags 0x41]  <function_decl 0x7feef41b3000 __builtin_putchar>) [0 __builtin_putchar S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:285 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC32") [flags 0x2]  <var_decl 0x7feef3d976c0 *.LC32>)) setprimarypolicy.c:286 -1
     (nil))
(call_insn 8 7 9 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7feef41b3360 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:286 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 9 8 10 2 (set (reg:SI 5 di)
        (const_int 10 [0xa])) setprimarypolicy.c:287 -1
     (nil))
(call_insn 10 9 11 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("putchar") [flags 0x41]  <function_decl 0x7feef41b3000 __builtin_putchar>) [0 __builtin_putchar S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:287 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC33") [flags 0x2]  <var_decl 0x7feef3d97750 *.LC33>)) setprimarypolicy.c:288 -1
     (nil))
(call_insn 12 11 13 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7feef41b3360 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:288 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 13 12 14 2 (set (reg:SI 5 di)
        (const_int 10 [0xa])) setprimarypolicy.c:289 -1
     (nil))
(call_insn 14 13 15 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("putchar") [flags 0x41]  <function_decl 0x7feef41b3000 __builtin_putchar>) [0 __builtin_putchar S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:289 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 15 14 16 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC34") [flags 0x2]  <var_decl 0x7feef3d977e0 *.LC34>)) setprimarypolicy.c:290 -1
     (nil))
(call_insn 16 15 17 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7feef41b3360 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:290 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 17 16 18 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC35") [flags 0x2]  <var_decl 0x7feef3d97870 *.LC35>)) setprimarypolicy.c:291 -1
     (nil))
(call_insn 18 17 19 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7feef41b3360 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:291 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 19 18 20 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC36") [flags 0x2]  <var_decl 0x7feef3d97900 *.LC36>)) setprimarypolicy.c:292 -1
     (nil))
(call_insn 20 19 21 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7feef41b3360 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:292 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 21 20 22 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC37") [flags 0x2]  <var_decl 0x7feef3d97990 *.LC37>)) setprimarypolicy.c:293 -1
     (nil))
(call_insn 22 21 23 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7feef41b3360 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:293 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 23 22 24 2 (set (reg:SI 5 di)
        (const_int 10 [0xa])) setprimarypolicy.c:294 -1
     (nil))
(call_insn 24 23 25 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("putchar") [flags 0x41]  <function_decl 0x7feef41b3000 __builtin_putchar>) [0 __builtin_putchar S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:294 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 25 24 26 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC38") [flags 0x2]  <var_decl 0x7feef3d97a20 *.LC38>)) setprimarypolicy.c:295 -1
     (nil))
(call_insn 26 25 27 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7feef41b3360 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:295 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 27 26 28 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC39") [flags 0x2]  <var_decl 0x7feef3d97ab0 *.LC39>)) setprimarypolicy.c:296 -1
     (nil))
(call_insn 28 27 29 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7feef41b3360 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:296 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 29 28 30 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC40") [flags 0x2]  <var_decl 0x7feef3d97b40 *.LC40>)) setprimarypolicy.c:297 -1
     (nil))
(call_insn 30 29 31 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7feef41b3360 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) setprimarypolicy.c:297 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 31 30 32 2 (set (reg:SI 5 di)
        (const_int 1 [0x1])) setprimarypolicy.c:298 -1
     (nil))
(call_insn 32 31 33 2 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7feef41c6000 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) setprimarypolicy.c:298 -1
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(barrier 33 32 0)
